# PHP
# Test and package your PHP project.
# Add steps that run tests, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'

schedules:
- cron: "0 23 * * Mon-Fri"
  displayName: Nightly Scheduled Build
  branches:
    include:
    - 'dev'

pool:
  vmImage: 'ubuntu-16.04'

variables:
  phpVersion: 7.3
  scriptDir: $(Build.Repository.LocalPath)/vendor/mikemadison13/blt-azure-pipelines/scripts/azure
  COMPOSER_CACHE_DIR: $(Pipeline.Workspace)/.composer
  deployment_user: 'digie'
  stack_id: 1

steps:
  - task: InstallSSHKey@0
    displayName: 'Install SSH Key for GitHub'
    inputs:
      knownHostsEntry: $(known_hosts)
      sshPublicKey: $(public_ssh_key)
      sshKeySecureFile: 'mars_ssh_key'
  - task: InstallSSHKey@0
    displayName: 'Install SSH Key for GitHub.com'
    inputs:
      knownHostsEntry: $(known_hosts_github)
      sshPublicKey: $(public_ssh_key_github)
      sshPassphrase: $(ssh_passphrase)
      sshKeySecureFile: 'github.private'
  - task: InstallSSHKey@0
    displayName: 'Install SSH Key for Acquia Cloud'
    inputs:
      knownHostsEntry: $(known_hosts_acquia)
      sshPublicKey: $(public_ssh_key_acquia)
      sshKeySecureFile: 'acquia_cloud'
  - checkout: self
    persistCredentials: true
  - task: Bash@3
    displayName: 'Set PHP Version'
    inputs:
      targetType: 'inline'
      script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion) &&
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion) &&
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion) &&
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion) &&
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion) &&
        sudo service mysql start
  - task: NodeTool@0
    displayName: 'Install Node JS'
    inputs:
      versionSpec: '10.x'
  - task: Cache@2
    displayName: 'Cache Composer Packages'
    inputs:
      key: 'composer | "$(Agent.OS)" | composer.lock'
      restoreKeys: |
        composer | "$(Agent.OS)"
        composer
      path: $(COMPOSER_CACHE_DIR)
  - task: Bash@3
    displayName: 'Install Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        sudo composer self-update --1 &&
        composer validate --no-check-all --ansi &&
        composer install &&
        npm install npm@latest -g
  - task: Bash@3
    displayName: 'BLT Validation'
    inputs:
      filePath: '$(scriptDir)/validate.sh'
  - task: Npm@1
    inputs:
      command: 'ci'
      workingDir: 'docroot/themes/custom/emulsifymars'
  - task: Npm@1
    inputs:
      command: 'custom'
      workingDir: 'docroot/themes/custom/emulsifymars'
      customCommand: 'run build'
  - task: Bash@3
    displayName: 'Setup Environment'
    inputs:
      filePath: '$(scriptDir)/setup_env.sh'
  - task: Bash@3
    displayName: 'Setup App'
    inputs:
      filePath: '$(scriptDir)/setup_app.sh'
  - task: Bash@3
    displayName: 'Run Php Unit Tests'
    inputs:
      filePath: './scripts/phpunit_test.sh'
  - task: SonarQubePrepare@4
    displayName: 'SonarQube Prepare'
    inputs:
      SonarQube: 'sonarqubetest'
      scannerMode: 'CLI'
      configMode: 'file'
  - task: SonarQubeAnalyze@4
    displayName: 'SonarQube Validation'
  #- task: SonarQubePublish@4
  #  displayName: 'SonarQube Publish'
  #  inputs:
  #    pollingTimeoutSec: '300'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'reports/phpunit/*.xml'
      mergeTestResults: true
      testRunTitle: 'Unit tests'
  #- task: PublishCodeCoverageResults@1
  #  inputs:
  #    summaryFileLocation: 'reports/phpunit/coverage.xml'
  - task: Bash@3
    displayName: 'Deploy Branch and Trigger Application Deployment on ACSF'
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), eq(variables['build.sourceBranchName'], 'dev'))
    inputs:
      targetType: 'inline'
      script: |
        ./scripts/deploy_branch.sh &&
        ./scripts/deploy_db.sh dev $(Build.SourceBranchName)-build code,db $(deployment_user) $(deployment_api_key) $(stack_id)
  # - task: Bash@3
  #   displayName: 'Deploy master Branch and Trigger Application Deployment to QA env'
  #   condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), eq(variables['build.sourceBranchName'], 'master'))
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       ./scripts/deploy_branch.sh &&
  #       ./scripts/deploy_db.sh dev $(Build.SourceBranchName)-build code,db $(deployment_user) $(deployment_api_key) $(stack_id)
  # - task: Bash@3
  #   displayName: 'Deploy master Branch and Trigger by Schedule Application Deployment to QA env'
  #   condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule'), eq(variables['build.sourceBranchName'], 'master'))
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       ./scripts/deploy_branch.sh &&
  #       ./scripts/deploy_db.sh 01qa $(Build.SourceBranchName)-build code,db $(deployment_user) $(deployment_api_key) $(stack_id)
  - task: Bash@3
    displayName: 'Deploy Tag'
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    inputs:
      filePath: './scripts/deploy_tag.sh'
  - task: Bash@3
    displayName: 'Deploy Release Branch For QA Environment'
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), startsWith(variables['build.sourceBranchName'], 'release-v9'))
    inputs:
      targetType: 'inline'
      script: |
        ./scripts/deploy_branch.sh &&
        ./scripts/deploy_db.sh 01qa $(Build.SourceBranchName)-build code,db $(deployment_user) $(deployment_api_key) $(stack_id)
