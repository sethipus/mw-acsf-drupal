<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\File\Exception\FileException;
use Drupal\file\Entity\File;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emulsifymars_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Init general vars.
  $translation = Drupal::translation();
  $social_storage = $form_state->getStorage('social');
  $social_settings = theme_get_setting('social');
  // Init social form elements.
  if (!isset($social_storage['social'])) {
    if (isset($social_settings) && count($social_settings) > 0) {
      $social_storage['social'] = $social_settings;
    }
    else {
      $social_storage['social'] = [
        ['icon' => '', 'link' => '', 'name' => ''],
      ];
    }
  }
  // Process multiple social links with form_state.
  $triggered = $form_state->getTriggeringElement();
  if (isset($triggered['#parents'][2]) && $triggered['#parents'][2] == 'remove_social') {
    unset($social_storage['social'][$triggered['#parents'][1]]);
  }
  if (isset($triggered['#parents'][1]) && $triggered['#parents'][1] == 'add_social') {
    array_push($social_storage['social'], [
      'icon' => '',
      'link' => '',
      'name' => '',
    ]);
  }
  $form_state->setStorage($social_storage);

  $form['color_settings'] = [
    '#type'        => 'details',
    '#title'       => $translation->translate('Color settings'),
    '#open'        => TRUE,
    '#description' => $translation->translate("MARS theme settings for color pallete."),
  ];
  $form['color_settings']['color_a'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Color A'),
    '#default_value' => theme_get_setting('color_a'),
    '#description'   => $translation->translate('Primary Color. Will be used as a main color throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['color_b'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Color B'),
    '#default_value' => theme_get_setting('color_b'),
    '#description'   => $translation->translate('Secondary Color. Will be used as a main color throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['color_c'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Color C'),
    '#default_value' => theme_get_setting('color_c'),
    '#description'   => $translation->translate('Includes the option to select a radial gradient variation (white in the center, assigned color on the outside) or keep the default flat color. Accent Color. Will be used for visual accents throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['color_d'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Color D'),
    '#default_value' => theme_get_setting('color_d'),
    '#description'   => $translation->translate('Accent Color. Will be used for visual accents throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['color_e'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Color E'),
    '#default_value' => theme_get_setting('color_e'),
    '#description'   => $translation->translate('Accent Color. Will be used for visual accents throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['color_f'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Color F'),
    '#default_value' => theme_get_setting('color_f'),
    '#description'   => $translation->translate('Accent Color. Will be used for visual accents throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['top_nav'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Top part of the header/footer'),
    '#default_value' => theme_get_setting('top_nav'),
    '#description'   => $translation->translate('Accent Color. Will be used for visual accents throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['top_nav_gradient'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Top part of the header/footer gradient color'),
    '#default_value' => theme_get_setting('top_nav_gradient'),
    '#description'   => $translation->translate('Accent Color. Will be used for visual accents throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['bottom_nav'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Bottom part of the footer'),
    '#default_value' => theme_get_setting('bottom_nav'),
    '#description'   => $translation->translate('Accent Color. Will be used for visual accents throughout the site. Must be AA compliant.'),
  ];
  $form['color_settings']['card_background'] = [
    '#type'          => 'jquery_colorpicker',
    '#title'         => $translation->translate('Card Background'),
    '#default_value' => theme_get_setting('card_background'),
    '#description'   => $translation->translate('If gradient check box is checked, use HEX color with white to create radial gradient.'),
  ];

  $form['font_settings'] = [
    '#type'        => 'details',
    '#title'       => $translation->translate('Theme font settings'),
    '#open'        => TRUE,
    '#description' => $translation->translate("MARS theme settings for font upload."),
  ];
  $form['font_settings']['headline_font_path'] = [
    '#type'  => 'textfield',
    '#title' => $translation->translate('Path to Headline Campaign Typeface'),
    '#default_value'   => theme_get_setting('headline_font_path'),
  ];
  $form['font_settings']['headline_font'] = [
    '#type'              => 'file',
    '#title'             => $translation->translate('Headline Campaign Typeface'),
    '#upload_location' => 'public://theme_config/',
    '#upload_validators' => [
      'file_validate_extensions' => ['woff ttf'],
    ],
  ];
  $form['font_settings']['primary_font_path'] = [
    '#type'  => 'textfield',
    '#title' => $translation->translate('Path to Primary Typeface'),
    '#default_value'   => theme_get_setting('primary_font_path'),
  ];
  $form['font_settings']['primary_font'] = [
    '#type'              => 'file',
    '#title'             => $translation->translate('Primary Typeface'),
    '#upload_location' => 'public://theme_config/',
    '#upload_validators' => [
      'file_validate_extensions' => ['woff ttf'],
    ],
  ];
  $form['font_settings']['secondary_font_path'] = [
    '#type'  => 'textfield',
    '#title' => $translation->translate('Path to Secondary Typeface'),
    '#default_value'   => theme_get_setting('secondary_font_path'),
  ];
  $form['font_settings']['secondary_font'] = [
    '#type'              => 'file',
    '#title'             => $translation->translate('Secondary Typeface'),
    '#upload_location' => 'public://theme_config/',
    '#upload_validators' => [
      'file_validate_extensions' => ['woff ttf'],
    ],
  ];

  $form['icons_settings'] = [
    '#type'        => 'details',
    '#title'       => $translation->translate('Theme images settings'),
    '#open'        => TRUE,
    '#description' => $translation->translate("MARS theme settings for icons/images upload."),
  ];
  $form['icons_settings']['graphic_divider'] = [
    '#title'           => $translation->translate('Graphic Divider'),
    '#type'            => 'managed_file',
    '#description'     => $translation->translate('Will be designed by each brand team. Size and format requirements detailed out in the Style Guide.'),
    '#upload_location' => 'public://theme_config/',
    '#required'        => FALSE,
    '#process'         => [
      ['\Drupal\file\Element\ManagedFile', 'processManagedFile'],
      'emulsifymars_process_image_widget',
    ],
    '#upload_validators' => [
      'file_validate_extensions' => ['svg'],
    ],
    '#theme'               => 'image_widget',
    '#preview_image_style' => 'medium',
    '#default_value'       => theme_get_setting('graphic_divider'),
  ];

  $form['icons_settings']['brand_shape'] = [
    '#title'           => $translation->translate('Path to Brand Shape'),
    '#type'            => 'managed_file',
    '#description'     => $translation->translate('Will be designed by each brand team. Size and format requirements detailed out in the Style Guide.'),
    '#upload_location' => 'public://theme_config/',
    '#required'        => FALSE,
    '#process'         => [
      ['\Drupal\file\Element\ManagedFile', 'processManagedFile'],
      'emulsifymars_process_image_widget',
    ],
    '#upload_validators' => [
      'file_validate_extensions' => ['svg'],
    ],
    '#theme'               => 'image_widget',
    '#preview_image_style' => 'medium',
    '#default_value'       => theme_get_setting('brand_shape'),
  ];

  $form['icons_settings']['brand_borders'] = [
    '#title'           => $translation->translate('Brand Borders'),
    '#type'            => 'managed_file',
    '#description'     => $translation->translate('Will be designed by each brand team. Size and format requirements detailed out in the Style Guide.'),
    '#upload_location' => 'public://theme_config/',
    '#required'        => FALSE,
    '#process'         => [
      ['\Drupal\file\Element\ManagedFile', 'processManagedFile'],
      'emulsifymars_process_image_widget',
    ],
    '#upload_validators' => [
      'file_validate_extensions' => ['svg'],
    ],
    '#theme'               => 'image_widget',
    '#preview_image_style' => 'medium',
    '#default_value'       => theme_get_setting('brand_borders'),
  ];

  $form['icons_settings']['brand_border_style'] = [
    '#type'          => 'radios',
    '#title'         => $translation->translate('Brand border style'),
    '#description'   => $translation->translate('Designates stretched border or repeated border shape.'),
    '#default_value' => theme_get_setting('brand_border_style'),
    '#options' => [
      'repeat' => $translation->translate('Repeat'),
      'stretch' => $translation->translate('Stretch'),
    ],
  ];

  $form['icons_settings']['brand_borders_2'] = [
    '#title'           => $translation->translate('Brand Borders for Cards'),
    '#type'            => 'managed_file',
    '#description'     => $translation->translate('Will be designed by each brand team. Size and format requirements detailed out in the Style Guide.'),
    '#upload_location' => 'public://theme_config/',
    '#required'        => FALSE,
    '#process'         => [
      ['\Drupal\file\Element\ManagedFile', 'processManagedFile'],
      'emulsifymars_process_image_widget',
    ],
    '#upload_validators' => [
      'file_validate_extensions' => ['svg'],
    ],
    '#theme'               => 'image_widget',
    '#preview_image_style' => 'medium',
    '#default_value'       => theme_get_setting('brand_borders_2'),
  ];

  $form['icons_settings']['png_asset'] = [
    '#title'           => $translation->translate('PNG Asset'),
    '#type'            => 'managed_file',
    '#description'     => $translation->translate('Will be designed by each brand team. Size and format requirements detailed out in the Style Guide.'),
    '#upload_location' => 'public://theme_config/',
    '#required'        => FALSE,
    '#process'         => [
      ['\Drupal\file\Element\ManagedFile', 'processManagedFile'],
      'emulsifymars_process_image_widget',
    ],
    '#upload_validators' => [
      'file_validate_extensions' => ['svg png'],
    ],
    '#theme'               => 'image_widget',
    '#preview_image_style' => 'medium',
    '#default_value'       => theme_get_setting('png_asset'),
  ];

  $form['icons_settings']['button_style'] = [
    '#type'          => 'radios',
    '#title'         => $translation->translate('Button/Card Style'),
    '#description'   => $translation->translate('Designates rounded buttons or sharp corner buttons and card corner.'),
    '#default_value' => theme_get_setting('button_style'),
    '#options' => [
      0 => $translation->translate('Round'),
      1 => $translation->translate('Sharp'),
    ],
  ];

  $form['social'] = [
    '#type'        => 'fieldset',
    '#tree'        => TRUE,
    '#title'       => $translation->translate('Theme social link settings'),
    '#description' => $translation->translate("MARS theme settings for icons/images upload."),
    '#prefix'      => '<div id="social">',
    '#suffix'      => '</div>',
  ];

  if (isset($social_storage['social'])) {
    foreach ($social_storage['social'] as $key => $value) {
      $form['social'][$key] = [
        '#type' => 'fieldset',
        '#tree' => TRUE,
      ];
      $form['social'][$key]['icon'] = [
        '#title'           => $translation->translate('Social network icon'),
        '#type'            => 'managed_file',
        '#upload_location' => 'public://theme_config/',
        '#required'        => TRUE,
        '#process'         => [
          ['\Drupal\file\Element\ManagedFile', 'processManagedFile'],
          'emulsifymars_process_image_widget',
        ],
        '#upload_validators' => [
          'file_validate_extensions' => ['svg'],
        ],
        '#theme'               => 'image_widget',
        '#preview_image_style' => 'thumbnail',
        '#default_value'       => $value['icon'],
      ];
      $form['social'][$key]['link'] = [
        '#title'         => $translation->translate('Social network link'),
        '#type'          => 'textfield',
        '#required'      => TRUE,
        '#default_value' => $value['link'],
      ];
      $form['social'][$key]['name'] = [
        '#title'         => $translation->translate('Social network title'),
        '#type'          => 'textfield',
        '#required'      => TRUE,
        '#default_value' => $value['name'],
      ];
      $form['social'][$key]['remove_social'] = [
        '#type'  => 'button',
        '#name' => 'social_' . $key,
        '#value' => $translation->translate('Remove social link'),
        '#limit_validation_errors' => [],
        '#ajax'  => [
          'callback' => 'emulsifymars_theme_settings_ajax_remove_social',
          'wrapper' => 'social',
        ],
      ];
    }
  }

  $form['social']['add_social'] = [
    '#type' => 'button',
    '#value' => $translation->translate('Add new social link'),
    '#href' => '',
    '#limit_validation_errors' => [],
    '#ajax' => [
      'callback' => 'emulsifymars_theme_settings_ajax_add_social',
      'wrapper' => 'social',
    ],
  ];

  $form['product_layout'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => $translation->translate('Product layout settings'),
    '#description' => $translation->translate("MARS theme settings for Product layout."),
  ];

  $form['product_layout']['show_allergen_info'] = [
    '#type' => 'checkbox',
    '#title' => $translation->translate('Show allergen info'),
    '#default_value' => theme_get_setting('show_allergen_info'),
  ];

  $form['#validate'] = ['_emulsifymars_form_system_theme_settings_validate'];
  $form['#submit'] = ['_emulsifymars_form_system_theme_settings_submit'];
}

/**
 * Add new social link callback.
 *
 * @param array $form
 *   Theme settings form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Theme settings form state.
 *
 * @return array
 *   Social container of theme settings.
 */
function emulsifymars_theme_settings_ajax_add_social(array $form, FormStateInterface $form_state): array {
  return $form['social'];
}

/**
 * Add remove social link callback.
 *
 * @param array $form
 *   Theme settings form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Theme settings form state.
 *
 * @return array
 *   Social container of theme settings.
 */
function emulsifymars_theme_settings_ajax_remove_social(array $form, FormStateInterface $form_state): array {
  return $form['social'];
}

/**
 * Helper function icon fields list.
 *
 * @return array
 *   Return list of font form elements.
 */
function _emulsifymars_get_icon_fields(): array {
  return [
    'graphic_divider',
    'brand_shape',
    'brand_borders',
    'brand_borders_2',
    'png_asset',
  ];
}

/**
 * Helper function font fields list.
 *
 * @return array
 *   Return list of font form elements.
 */
function _emulsifymars_get_font_fields(): array {
  return [
    'headline_font',
    'primary_font',
    'secondary_font',
  ];
}

/**
 * Validate theme settings form.
 *
 * @param array $form
 *   Theme settings form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Theme settings form state.
 */
function _emulsifymars_form_system_theme_settings_validate(array &$form, FormStateInterface $form_state) {
  if (Drupal::moduleHandler()->moduleExists('file')) {
    foreach (_emulsifymars_get_font_fields() as $font) {
      _emulsifymars_file_save_process($form['font_settings'][$font], $form_state, $font);
    }
  }
}

/**
 * Helper function for uploading files from settings from.
 *
 * @param array $form_element
 *   Form element to process uploaded file state.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Theme settings form state.
 * @param string $value_name
 *   File value to store.
 */
function _emulsifymars_file_save_process(array $form_element, FormStateInterface &$form_state, string $value_name) {
  $file = _file_save_upload_from_form($form_element, $form_state, 0);
  if ($file) {
    // Put the temporary file in form_values so we can save it on submit.
    $form_state->setValue($value_name, $file);
  }
}

/**
 * Submit theme settings form.
 *
 * @param array $form
 *   Theme settings form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Theme settings form state.
 */
function _emulsifymars_form_system_theme_settings_submit(array &$form, FormStateInterface $form_state) {
  $default_scheme = Drupal::config('system.file')->get('default_scheme');
  foreach (_emulsifymars_get_font_fields() as $font) {
    _emulsifymars_file_store_process($form_state, $font, $default_scheme);
  }
}

/**
 * Helper function to store file location in config.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Theme settings form state.
 * @param string $value_name
 *   File upload value.
 * @param string $default_scheme
 *   Default file scheme.
 */
function _emulsifymars_file_store_process(FormStateInterface &$form_state, string $value_name, string $default_scheme) {
  $values = $form_state->getValues();
  try {
    if (!empty($values[$value_name])) {
      $filename = Drupal::service('file_system')->copy($values[$value_name]->getFileUri(), $default_scheme . '://');
      $form_state->setValue($value_name, '');
      $form_state->setValue($value_name . '_path', file_create_url($filename));
    }
  }
  catch (FileException $e) {
    // Ignore.
  }
}

/**
 * Process managed_file element to add preview element with uploaded image.
 *
 * @param array $element
 *   Form element children.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 * @param array $complete_form
 *   Processed form.
 *
 * @return array
 *   Form element for further processing and theming
 */
function emulsifymars_process_image_widget(array &$element, FormStateInterface $form_state, array &$complete_form) {
  if (empty($element['fids']['#value'])) {
    return $element;
  }

  $file = reset($element['#files']);
  $file_variables = [
    'style_name' => $element['#preview_image_style'],
    'uri' => $file->getFileUri(),
  ];

  // Determine image dimensions.
  if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
    $file_variables['width'] = $element['#value']['width'];
    $file_variables['height'] = $element['#value']['height'];
  }
  else {
    $image = Drupal::service('image.factory')->get($file->getFileUri());
    if ($image->isValid()) {
      $file_variables['width'] = $image->getWidth();
      $file_variables['height'] = $image->getHeight();
    }
    else {
      $file_variables['width'] = $file_variables['height'] = NULL;
    }
  }

  $element['preview'] = [
    '#weight' => -10,
    '#theme' => 'image_style',
    '#width' => $file_variables['width'],
    '#height' => $file_variables['height'],
    '#style_name' => $file_variables['style_name'],
    '#uri' => $file_variables['uri'],
  ];

  // Store the dimensions in the form so the file doesn't have to be
  // accessed again. This is important for remote files.
  $element['width'] = [
    '#type' => 'hidden',
    '#value' => $file_variables['width'],
  ];
  $element['height'] = [
    '#type' => 'hidden',
    '#value' => $file_variables['height'],
  ];

  return $element;
}

/**
 * Implements hook_preprocess_html().
 */
function emulsifymars_preprocess_html(&$variables) {
  $theme_settings = Drupal::config('emulsifymars.settings')->get();
  $style_tag = sprintf("@font-face {font-family: 'DrupalHeadlineCampaignFont'; src: url('%s') format('opentype');}", $theme_settings['headline_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalPrimaryTypefaceFont'; src: url('%s') format('opentype');}", $theme_settings['primary_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalSecondaryTypefaceFont'; src: url('%s') format('opentype');}", $theme_settings['secondary_font_path']);
  $style_tag .= sprintf(":root [data-theme='drupal'] {%s}", _emulsifymars_preprocess_css_properties($theme_settings));
  $variables['page']['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'style',
      '#value' => $style_tag,
      '#attributes' => [
        'type' => 'text/css',
      ],
    ],
    'custom-css-properties',
  ];

  // CSS Variables Polyfill for IE11 package ie11-custom-properties.
  $url = "https://cdn.jsdelivr.net/gh/nuxodin/ie11CustomProperties@4.1.0/ie11CustomProperties.min.js";
  $script = "window.MSInputMethodContext && document.documentMode && document.write('<script src=\"$url\"><\/script>');";
  $variables['page']['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => Markup::create($script),
      '#attributes' => [
        'type' => 'text/javascript',
      ],
    ],
    'custom-css',
  ];
}

/**
 * Process css custom properties.
 *
 * @param array $settings
 *   Theme settings array.
 *
 * @return string
 *   Parsed custom properties string.
 */
function _emulsifymars_preprocess_css_properties(array $settings): string {
  $properties = '';
  $properties .= sprintf(" --c-primary: #%s;", $settings['color_a']);
  $properties .= sprintf(" --c-secondary: #%s;", $settings['color_b']);
  $properties .= sprintf(" --c-subcolor-1: #%s;", $settings['color_c']);
  $properties .= sprintf(" --c-subcolor-2: #%s;", $settings['color_d']);
  $properties .= sprintf(" --c-subcolor-3: #%s;", $settings['color_e']);
  $properties .= sprintf(" --c-subcolor-4: #%s;", $settings['color_f']);
  $properties .= sprintf(" --c-primary-rgb: %s;", hex2_rgb($settings['color_a'], TRUE));
  $properties .= sprintf(" --c-secondary-rgb: %s;", hex2_rgb($settings['color_b'], TRUE));
  $properties .= sprintf(" --c-subcolor-1-rgb: %s;", hex2_rgb($settings['color_c'], TRUE));
  $properties .= sprintf(" --c-subcolor-2-rgb: %s;", hex2_rgb($settings['color_d'], TRUE));
  $properties .= sprintf(" --c-subcolor-3-rgb: %s;", hex2_rgb($settings['color_e'], TRUE));
  $properties .= sprintf(" --c-subcolor-4-rgb: %s;", hex2_rgb($settings['color_f'], TRUE));
  $properties .= sprintf(" --c-top-nav: #%s;", $settings['top_nav']);
  $properties .= sprintf(" --c-top-nav-gradient: #%s;", $settings['top_nav_gradient']);
  $properties .= sprintf(" --c-bottom-nav: #%s;", $settings['bottom_nav']);
  $properties .= sprintf(" --c-card-background: #%s;", $settings['card_background']);

  $properties .= sprintf(" --v-heading-font: %s;", 'DrupalHeadlineCampaignFont');
  $properties .= sprintf(" --v-primary-font: %s;", 'DrupalPrimaryTypefaceFont');
  $properties .= sprintf(" --v-secondary-font: %s;", 'DrupalSecondaryTypefaceFont');

  if (theme_get_setting('button_style') == 0) {
    $properties .= sprintf(" --v-button-border-radius: %s;", '30px');
    $properties .= sprintf(" --v-card-border-radius: %s;", '20px');
  }
  else {
    $properties .= sprintf(" --v-button-border-radius: %s;", '0');
    $properties .= sprintf(" --v-card-border-radius: %s;", '0');
  }

  _emulsifymars_load_images_from_theme($properties);

  return $properties;
}

/**
 * Convert a hexa decimal color code to its RGB equivalent.
 *
 * @param string $hexStr
 *   Hexadecimal color value.
 * @param bool $returnAsString
 *   If set true, returns the value separated by the separator character.
 *   Otherwise returns associative array.
 * @param string $seperator
 *   To separate RGB values. Applicable only if second parameter is true.
 */
function hex2_rgb($hexStr, $returnAsString = FALSE, $seperator = ',') {
  $hexStr = preg_replace("/[^0-9A-Fa-f]/", '', $hexStr);
  $rgbArray = [];
  if (strlen($hexStr) == 6) {
    $colorVal = hexdec($hexStr);
    $rgbArray['red'] = 0xFF & ($colorVal >> 0x10);
    $rgbArray['green'] = 0xFF & ($colorVal >> 0x8);
    $rgbArray['blue'] = 0xFF & $colorVal;
  }
  elseif (strlen($hexStr) == 3) {
    $rgbArray['red'] = hexdec(str_repeat(substr($hexStr, 0, 1), 2));
    $rgbArray['green'] = hexdec(str_repeat(substr($hexStr, 1, 1), 2));
    $rgbArray['blue'] = hexdec(str_repeat(substr($hexStr, 2, 1), 2));
  }
  else {
    return FALSE;
  }
  return $returnAsString ? implode($seperator, $rgbArray) : $rgbArray;
}

/**
 * Helper function to preload images as background with theme configurator.
 */
function _emulsifymars_load_images_from_theme(string &$properties) {
  $themeParser = Drupal::service('mars_common.theme_configurator_parser');
  $fields = [
    'graphic_divider',
    'brand_shape',
  ];
  foreach ($fields as $field) {
    $svg = $themeParser->getFileContentFromTheme($field);
    $properties .= sprintf(" --v-%s: %s;", str_replace('_', '-', $field), 'url("data:image/svg+xml;base64,' . base64_encode($svg) . '")');
  }
}

/**
 * Implements hook_preprocess_social_icons().
 */
function emulsifymars_preprocess_social_icons(&$variables) {
  $social_menu_items = &$variables['social_menu_items'];
  $theme_settings = Drupal::config('emulsifymars.settings')->get();
  foreach ($theme_settings['social'] as $key => $social_settings) {
    $social_menu_items[$key]['title'] = $social_settings['name'];
    $social_menu_items[$key]['url'] = $social_settings['link'];
    if (!empty($social_settings['icon'])) {
      $fid = reset($social_settings['icon']);
      $file = File::load($fid);
    }
    $social_menu_items[$key]['icon'] = !empty($file) ? $file->createFileUrl() : '';
  }
}

/**
 * Implements hook_theme().
 */
function emulsifymars_theme() {
  return [
    'social_icons' => [
      'template'   => 'misc/social-menu',
      'variables'  => [
        'social_menu_items' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function emulsifymars_preprocess_views_view_unformatted(&$variables) {
  /** @var \Drupal\mars_common\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_common.media_helper');
  $view = $variables['view'];
  $id = $view->storage->id();
  $items = [];

  if ($id == 'related_recipes') {
    foreach ($view->result as $result) {
      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
      $entity = $result->_entity;
      $url = Url::fromRoute('entity.node.canonical', ['node' => $entity->id()]);
      $url = $url->toString();

      $body_raw = $entity->get('field_recipe_description')->first()->getValue();
      $description = !empty($body_raw['value']) ? $body_raw['value'] : '';

      $media_id = $media_helper->getEntityMainMediaId($entity);
      $media_params = $media_helper->getMediaParametersById($media_id);

      $image_src = NULL;
      $image_alt = NULL;
      if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
        $image_src = $media_params['src'];
        $image_alt = $media_params['alt'];
      }

      $items[] = [
        'card__image__src' => $image_src,
        'card__image__alt' => $image_alt,
        'card__heading' => $entity->getTitle(),
        'card__link__url' => $url,
        'card__link__text' => t('See details'),
        'card__body' => $description,
      ];
    }
  }

  $themeParser = \Drupal::service('mars_common.theme_configurator_parser');
  $variables['divider'] = $themeParser->getFileContentFromTheme('graphic_divider');
  $variables['brand_borders'] = $themeParser->getFileWithId('brand_borders_2', 'recipe-hero-border');

  $variables['theme_styles'] = 'drupal';
  $variables['grid_type'] = 'card';
  $variables['item_type'] = 'card';
  $variables['items'] = $items;
}
