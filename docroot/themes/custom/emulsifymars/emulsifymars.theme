<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\file\Entity\File;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emulsifymars_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  \Drupal::service('mars_common.theme_configurator_service')->getThemeConfiguratorForm($form, $form_state);

  if (isset($form['logo']['settings']['logo_upload']['#upload_validators']['file_validate_is_image'])) {
    unset($form['logo']['settings']['logo_upload']['#upload_validators']['file_validate_is_image']);
  }
  $form['logo']['settings']['logo_upload']['#upload_validators']['file_validate_extensions'] = [
    'png gif jpg jpeg apng svg',
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function emulsifymars_preprocess_html(&$variables) {
  if (isset($variables['node_type']) && $variables['node_type'] == 'faq_contact') {
    $variables['attributes']['data-theme'] = 'drupal';
  }
  $theme_settings = Drupal::config('emulsifymars.settings')->get();
  $style_tag = sprintf("@font-face {font-family: 'DrupalHeadlineCampaignFont'; src: url('%s') format('opentype'); font-weight: 100; font-display: swap}", $theme_settings['headline_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalHeadlineCampaignFont'; src: url('%s') format('opentype'); font-weight: 400; font-display: swap}", $theme_settings['headline_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalHeadlineCampaignFont'; src: url('%s') format('opentype'); font-weight: 900; font-display: swap}", $theme_settings['headline_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalPrimaryTypefaceFont'; src: url('%s') format('opentype'); font-weight: 100; font-display: swap}", $theme_settings['primary_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalPrimaryTypefaceFont'; src: url('%s') format('opentype'); font-weight: 400; font-display: swap}", $theme_settings['primary_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalPrimaryTypefaceFont'; src: url('%s') format('opentype'); font-weight: 900; font-display: swap}", $theme_settings['primary_font_path']);
  $style_tag .= sprintf("@font-face {font-family: 'DrupalSecondaryTypefaceFont'; src: url('%s') format('opentype'); font-display: swap}", $theme_settings['secondary_font_path']);
  $style_tag .= sprintf(":root [data-theme='drupal'] {%s}", _emulsifymars_preprocess_css_properties($theme_settings));
  $variables['page']['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'style',
      '#value' => $style_tag,
      '#attributes' => [
        'type' => 'text/css',
      ],
    ],
    'custom-css-properties',
  ];

  // CSS Variables Polyfill for IE11 package ie11-custom-properties.
  $url = "https://cdn.jsdelivr.net/gh/nuxodin/ie11CustomProperties@4.1.0/ie11CustomProperties.min.js";
  $script = "window.MSInputMethodContext && document.documentMode && document.write('<script src=\"$url\"><\/script>');";
  $variables['page']['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => Markup::create($script),
      '#attributes' => [
        'type' => 'text/javascript',
      ],
    ],
    'custom-css',
  ];

  if (isset($variables['node_type'])) {
    $variables['attributes']['class'][] = 'node--' . $variables['node_type'];
  }
}

/**
 * Process css custom properties.
 *
 * @param array $settings
 *   Theme settings array.
 *
 * @return string
 *   Parsed custom properties string.
 */
function _emulsifymars_preprocess_css_properties(array $settings): string {
  $properties = '';
  $properties .= sprintf(" --c-primary: %s;", $settings['color_a']);
  $properties .= sprintf(" --c-secondary: %s;", $settings['color_b']);
  $properties .= sprintf(" --c-subcolor-1: %s;", $settings['color_c']);
  $properties .= sprintf(" --c-subcolor-2: %s;", $settings['color_d']);
  $properties .= sprintf(" --c-subcolor-3: %s;", $settings['color_e']);
  $properties .= sprintf(" --c-subcolor-4: %s;", $settings['color_f']);
  $properties .= sprintf(" --c-primary-rgb: %s;", hex2_rgb($settings['color_a'], TRUE));
  $properties .= sprintf(" --c-secondary-rgb: %s;", hex2_rgb($settings['color_b'], TRUE));
  $properties .= sprintf(" --c-subcolor-1-rgb: %s;", hex2_rgb($settings['color_c'], TRUE));
  $properties .= sprintf(" --c-subcolor-2-rgb: %s;", hex2_rgb($settings['color_d'], TRUE));
  $properties .= sprintf(" --c-subcolor-3-rgb: %s;", hex2_rgb($settings['color_e'], TRUE));
  $properties .= sprintf(" --c-subcolor-4-rgb: %s;", hex2_rgb($settings['color_f'], TRUE));

  // Top nav falls back to color C.
  if (!empty($settings['top_nav'])) {
    $properties .= sprintf(" --c-top-nav: %s;", $settings['top_nav']);
  }
  else {
    $properties .= sprintf(" --c-top-nav: %s;", $settings['color_c']);
  }

  if (!empty($settings['top_nav_gradient'])) {
    $properties .= sprintf(" --c-top-nav-gradient: %s;", $settings['top_nav_gradient']);
  }

  if (!empty($settings['footer_top'])) {
    $properties .= sprintf(" --c-footer-top: %s;", $settings['footer_top']);
  }

  if (!empty($settings['footer_top_gradient'])) {
    $properties .= sprintf(" --c-footer-top-gradient: %s;", $settings['footer_top_gradient']);
  }

  // Bottom nav falls back to color A.
  if (!empty($settings['bottom_nav'])) {
    $properties .= sprintf(" --c-bottom-nav: %s;", $settings['bottom_nav']);
  }
  else {
    $properties .= sprintf(" --c-bottom-nav: %s;", $settings['color_a']);
  }

  // Product filter color.
  if (!empty($settings['product_filter_arrow_color'])) {
    $properties .= sprintf(" --c-product_filter_arrow_color: %s;", $settings['product_filter_arrow_color']);
  }
  else {
    $properties .= sprintf(" --c-product_filter_arrow_color: %s;", $settings['color_b']);
  }

  if (!empty($settings['product_filter_clearall_color'])) {
    $properties .= sprintf(" --c-product_filter_clearall_color: %s;", $settings['product_filter_clearall_color']);
  }
  else {
    $properties .= sprintf(" --c-product_filter_clearall_color: %s;", $settings['color_b']);
  }

  // Entry gate color.
  if (!empty($settings['entrygate_background_color'])) {
    $properties .= sprintf(" --c-entrygate_background_color: %s;", $settings['entrygate_background_color']);
  }
  else {
    $properties .= sprintf(" --c-entrygate_background_color: %s;", $settings['color_d']);
  }

  if (!empty($settings['entrygate_title_color'])) {
    $properties .= sprintf(" --c-entrygate_title_color: %s;", $settings['entrygate_title_color']);
  }
  else {
    $properties .= sprintf(" --c-entrygate_title_color: %s;", $settings['color_a']);
  }

  if (!empty($settings['entrygate_text_color'])) {
    $properties .= sprintf(" --c-entrygate_text_color: %s;", $settings['entrygate_text_color']);
  }
  else {
    $properties .= sprintf(" --c-entrygate_text_color: %s;", $settings['color_a']);
  }

  if (!empty($settings['entrygate_date_color'])) {
    $properties .= sprintf(" --c-entrygate_date_color: %s;", $settings['entrygate_date_color']);
  }
  else {
    $properties .= sprintf(" --c-entrygate_date_color: %s;", $settings['color_a']);
  }

  if (!empty($settings['entrygate_alert_color'])) {
    $properties .= sprintf(" --c-entrygate_alert_color: %s;", $settings['entrygate_alert_color']);
  }
  else {
    $properties .= sprintf(" --c-entrygate_alert_color: %s;", $settings['color_b']);
  }

  // Cookie banner color.
  if (!empty($settings['cookie_banner'])) {
    $properties .= sprintf(" --c-cookie-banner: %s;", $settings['cookie_banner']);
  }
  else {
    $properties .= sprintf(" --c-cookie-banner: %s;", $settings['color_b']);
  }

  if (!empty($settings['cookie_banner_gradient'])) {
    $properties .= sprintf(" --c-cookie-banner-gradient: %s;", $settings['cookie_banner_gradient']);
  }
  else {
    $properties .= sprintf(" --c-cookie-banner-gradient: %s;", $settings['color_b']);
  }

  if (!empty($settings['cookie_banner_text'])) {
    $properties .= sprintf(" --c-cookie-banner-text: %s;", $settings['cookie_banner_text']);
  }

  if (!empty($settings['cookie_banner_close'])) {
    $properties .= sprintf(" --c-cookie-banner-close: %s;", $settings['cookie_banner_close']);
  }

  $properties .= sprintf(" --c-card-background: %s;", $settings['card_background']);
  // Card text overrides.
  if (!empty($settings['card_title'])) {
    $properties .= sprintf(" --c-card-title: %s;", $settings['card_title']);
  }
  if (!empty($settings['card_eyebrow'])) {
    $properties .= sprintf(" --c-card-eyebrow: %s;", $settings['card_eyebrow']);
  }

  $properties .= sprintf(" --v-heading-font: %s;", "DrupalHeadlineCampaignFont, Arial, Helvetica Neue, Helvetica, sans-serif");
  $properties .= sprintf(" --v-primary-font: %s;", "DrupalPrimaryTypefaceFont, Arial, Helvetica Neue, Helvetica, sans-serif");
  $properties .= sprintf(" --v-secondary-font: %s;", "DrupalSecondaryTypefaceFont, Arial, Helvetica Neue, Helvetica, sans-serif");
  $properties .= sprintf(" --v-heading-font-m-letter-spacing: %s;", $settings['headline_font_mobile_letterspacing']);
  $properties .= sprintf(" --v-heading-font-t-letter-spacing: %s;", $settings['headline_font_tablet_letterspacing']);
  $properties .= sprintf(" --v-heading-font-d-letter-spacing: %s;", $settings['headline_font_desktop_letterspacing']);
  $properties .= sprintf(" --v-primary-font-m-letter-spacing: %s;", $settings['primary_font_mobile_letterspacing']);
  $properties .= sprintf(" --v-primary-font-t-letter-spacing: %s;", $settings['primary_font_tablet_letterspacing']);
  $properties .= sprintf(" --v-primary-font-d-letter-spacing: %s;", $settings['primary_font_desktop_letterspacing']);
  $properties .= sprintf(" --v-secondary-font-m-letter-spacing: %s;", $settings['secondary_font_mobile_letterspacing']);
  $properties .= sprintf(" --v-secondary-font-t-letter-spacing: %s;", $settings['secondary_font_tablet_letterspacing']);
  $properties .= sprintf(" --v-secondary-font-d-letter-spacing: %s;", $settings['secondary_font_desktop_letterspacing']);

  if (theme_get_setting('button_style') == 0) {
    $properties .= sprintf(" --v-button-border-radius: %s;", '30px');
    $properties .= sprintf(" --v-card-border-radius: %s;", '20px');
  }
  else {
    $properties .= sprintf(" --v-button-border-radius: %s;", '0');
    $properties .= sprintf(" --v-card-border-radius: %s;", '0');
  }

  _emulsifymars_load_images_from_theme($properties);

  return $properties;
}

/**
 * Convert a hexa decimal color code to its RGB equivalent.
 *
 * @param string $hexStr
 *   Hexadecimal color value.
 * @param bool $returnAsString
 *   If set true, returns the value separated by the separator character.
 *   Otherwise returns associative array.
 * @param string $seperator
 *   To separate RGB values. Applicable only if second parameter is true.
 */
function hex2_rgb($hexStr, $returnAsString = FALSE, $seperator = ',') {
  $hexStr = preg_replace("/[^0-9A-Fa-f]/", '', $hexStr);
  $rgbArray = [];
  if (strlen($hexStr) == 6) {
    $colorVal = hexdec($hexStr);
    $rgbArray['red'] = 0xFF & ($colorVal >> 0x10);
    $rgbArray['green'] = 0xFF & ($colorVal >> 0x8);
    $rgbArray['blue'] = 0xFF & $colorVal;
  }
  elseif (strlen($hexStr) == 3) {
    $rgbArray['red'] = hexdec(str_repeat(substr($hexStr, 0, 1), 2));
    $rgbArray['green'] = hexdec(str_repeat(substr($hexStr, 1, 1), 2));
    $rgbArray['blue'] = hexdec(str_repeat(substr($hexStr, 2, 1), 2));
  }
  else {
    return FALSE;
  }
  return $returnAsString ? implode($seperator, $rgbArray) : $rgbArray;
}

/**
 * Helper function to preload images as background with theme configurator.
 */
function _emulsifymars_load_images_from_theme(string &$properties) {
  /** @var \Drupal\mars_common\ThemeConfiguratorParser $themeParser */
  $themeParser = Drupal::service('mars_common.theme_configurator_parser');
  $assets = [
    'graphic-divider' => $themeParser->getGraphicDivider(),
  ];

  /** @var \Drupal\mars_media\SVG\SVG|null $asset */
  foreach ($assets as $var_name => $asset) {
    if ($asset) {
      $var_value = 'url("data:image/svg+xml;base64,' . $asset->toBase64() . '")';
      $properties .= sprintf(" --v-%s: %s;", $var_name, $var_value);
    }
  }
}

/**
 * Implements hook_preprocess_social_icons().
 */
function emulsifymars_preprocess_social_icons(&$variables) {
  $social_menu_items = &$variables['social_menu_items'];
  $theme_settings = Drupal::config('emulsifymars.settings')->get();
  foreach ($theme_settings['social'] as $key => $social_settings) {
    $social_menu_items[$key]['title'] = $social_settings['name'];
    $social_menu_items[$key]['url'] = $social_settings['link'];
    if (!empty($social_settings['icon'])) {
      $fid = reset($social_settings['icon']);
      $file = File::load($fid);
    }
    $social_menu_items[$key]['icon'] = !empty($file) ? $file->createFileUrl() : '';
  }
}

/**
 * Implements hook_theme().
 */
function emulsifymars_theme() {
  return [
    'social_icons' => [
      'template'   => 'misc/social-menu',
      'variables'  => [
        'social_menu_items' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function emulsifymars_preprocess_views_view_unformatted(&$variables) {
  /** @var \Drupal\mars_media\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_media.media_helper');
  $view = $variables['view'];
  $id = $view->storage->id();
  $items = [];

  if ($id == 'related_recipes') {
    foreach ($view->result as $result) {
      /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
      $entity = $result->_entity;
      $url = Url::fromRoute('entity.node.canonical', ['node' => $entity->id()]);
      $url = $url->toString();

      $body_raw = $entity->get('field_recipe_description')->first()->getValue();
      $description = !empty($body_raw['value']) ? $body_raw['value'] : '';

      $media_id = $media_helper->getEntityMainMediaId($entity);
      $media_params = $media_helper->getMediaParametersById($media_id);

      $image_src = NULL;
      $image_alt = NULL;
      if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
        $image_src = $media_params['src'];
        $image_alt = $media_params['alt'];
      }

      $items[] = [
        'card__image__src' => $image_src,
        'card__image__alt' => $image_alt,
        'card__heading' => $entity->getTitle(),
        'card__link__url' => $url,
        'card__link__text' => t('See details'),
        'card__body' => $description,
      ];
    }
  }
  /** @var \Drupal\mars_common\ThemeConfiguratorParser $themeParser */
  $themeParser = \Drupal::service('mars_common.theme_configurator_parser');
  $variables['divider'] = $themeParser->getGraphicDivider();
  $variables['brand_borders'] = $themeParser->getBrandBorder2();
  $variables['brand_shape'] = $themeParser->getBrandShapeWithoutFill();

  $variables['theme_styles'] = 'drupal';
  $variables['grid_type'] = 'card';
  $variables['item_type'] = 'card';
  $variables['items'] = $items;
}

/**
 * Implements hook_page_attachments_alter().
 */
function emulsifymars_page_attachments_alter(array &$attachments) {

  foreach ($attachments['#attached']['library'] as $key => $library) {

    if ($library == 'system/base') {
      unset($attachments['#attached']['library'][$key]);
    }

    if ($library == 'poll/drupal.poll-links') {
      unset($attachments['#attached']['library'][$key]);
    }
  }
}
