<?php

/**
 * @file
 * The Mars search module install file.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\StorageComparer;
use Drupal\Core\Config\ConfigImporter;
use Drupal\Core\Config\StorageInterface;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_update_N().
 *
 * Import file_brand_initiative configs programmatically.
 */
function mars_search_update_8001() {
  $storage_comparer = new StorageComparer(
    \Drupal::service('config.storage.sync'),
    \Drupal::service('config.storage'),
    \Drupal::service('config.manager')
  );
  $config_importer = new ConfigImporter(
    $storage_comparer,
    \Drupal::service('event_dispatcher'),
    \Drupal::service('config.manager'),
    \Drupal::lock(),
    \Drupal::service('config.typed'),
    \Drupal::moduleHandler(),
    \Drupal::service('module_installer'),
    \Drupal::service('theme_handler'),
    \Drupal::service('string_translation')
  );
  $collection = StorageInterface::DEFAULT_COLLECTION;
  $method = new \ReflectionMethod($config_importer, 'processConfiguration');
  $method->setAccessible(TRUE);
  $method->invoke($config_importer, $collection, 'create', 'field.field.node.product.field_brand_initiatives');
  $method->invoke($config_importer, $collection, 'create', 'field.field.node.product_multipack.field_brand_initiatives');

  $config_path = drupal_get_path('module', 'mars_search') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write(
    'field.field.node.product.field_brand_initiatives',
    $source->read('field.field.node.product.field_brand_initiatives')
  );
  $config_storage->write(
    'field.field.node.product_multipack.field_brand_initiatives',
    $source->read('field.field.node.product_multipack.field_brand_initiatives')
  );
  $config_storage->write(
    'field.field.node.product.field_brand_initiatives',
    $source->read('field.field.node.product.field_brand_initiatives')
  );
  $config_storage->write(
    'field.field.node.product_multipack.field_brand_initiatives',
    $source->read('field.field.node.product_multipack.field_brand_initiatives')
  );
}

/**
 * Implements hook_update_N().
 *
 * Copy field_product_brand to field_brand_initiatives.
 */
function mars_search_update_8002() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $product_entities = $storage_handler->loadByProperties(['type' => 'product']);
  foreach ($product_entities as $product_entity) {
    $brand_value = $product_entity->get('field_product_brand')->getValue();
    if (!empty($brand_value)) {
      $product_entity->set('field_brand_initiatives', $brand_value);
      $product_entity->save();
    }
  }

  $multipack_entities = $storage_handler->loadByProperties(['type' => 'product_multipack']);
  foreach ($multipack_entities as $multipack_entity) {
    $brand_value = $multipack_entity->get('field_product_brand')->getValue();
    if (!empty($brand_value)) {
      $multipack_entity->set('field_brand_initiatives', $brand_value);
      $multipack_entity->save();
    }
  }

  FieldConfig::loadByName(
    'node',
    'product',
    'field_product_brand'
  )->delete();
  FieldConfig::loadByName(
    'node',
    'product_multipack',
    'field_product_brand'
  )->delete();
}

/**
 * Field types clean-up.
 */
function mars_search_update_8003() {
  module_load_include('install', 'search_api_solr');
  search_api_solr_update_8301();
}

/**
 * Delete text_en_6_0_0 and text_en_7_0_0 from acquia_contenthub_publisher_export_tracking.
 */
function mars_search_update_8004() {
  $types = [
    'text_en_6_0_0',
    'text_en_7_0_0',
    'text_de_6_0_0',
    'text_de_7_0_0',
    'text_fr_6_0_0',
    'text_fr_7_0_0',
    'text_de_scientific_6_0_0',
    'text_de_scientific_7_0_0',
  ];
  $query = \Drupal::database()->delete('acquia_contenthub_publisher_export_tracking');
  $query->condition('entity_type', 'solr_field_type');
  $query->condition('entity_id', $types, 'IN');
  $query->execute();
}

/**
 * Delete text_en_6_0_0 and text_en_7_0_0 from acquia_contenthub_publisher_export_tracking.
 */
function mars_search_update_8005() {
  mars_search_update_8004();
}

/**
 * Disable new view 'Acquia Search' for removing 'Search' link from main menu.
 */
function mars_search_update_8006() {
  $storage = \Drupal::entityTypeManager()->getStorage('view');
  $view = $storage->load('acquia_search');
  $view->disable()->save();
}

/**
 * Create translations dir.
 */
function mars_search_update_8007() {
  if (!file_exists('public://translations')) {
    \Drupal::service('file_system')->mkdir('public://translations');
  }
}
