<?php

/**
 * @file
 * MARS Product module main file.
 */

use Acquia\Blt\Robo\Common\EnvironmentDetector;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\mars_product\Plugin\Block\PdpHeroBlock;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function mars_product_theme($existing, $type, $theme, $path) {
  return [
    'pdp_hero_block' => [
      'variables' => [
        'pdp_common_data' => [],
        'pdp_size_data' => [],
        'pdp_data' => [],
        'pdp_bundle_type' => [],
      ],
      'template' => 'pdp-hero-block',
    ],
    'product_content_pair_up_block' => [
      'variables' => [
        'title' => NULL,
        'graphic_divider' => NULL,
        'background' => NULL,
        'lead_card_entity' => NULL,
        'lead_card_eyebrow' => NULL,
        'lead_card_title' => NULL,
        'cta_link_url' => NULL,
        'cta_link_text' => NULL,
        'supporting_card_entity' => NULL,
        'supporting_card_entity_view' => NULL,
      ],
      'template' => 'product-content-pair-up-block',
    ],
    'pdp_rating_block' => [
      'variables' => [
        'items' => [],
      ],
      'template' => 'pdp-rating-block',
    ],
  ];
}

/**
 * Implements hook_entity_view().
 */
function mars_product_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'card' && $entity->bundle() == 'product') {
    $wtb_confg = \Drupal::config('mars_product.wtb.settings');
    $vendor = $wtb_confg->get('commerce_vendor');

    if (isset($vendor) && $vendor == PdpHeroBlock::VENDOR_PRICE_SPIDER) {
      $metatags = [
        'ps-key' => [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'ps-key',
            'content' => $wtb_confg->get('widget_id'),
          ],
        ],
        'ps-country' => [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'ps-country',
            'content' => \Drupal::configFactory()
              ->get('system.date')
              ->get('country.default'),
          ],
        ],
        'ps-language' => [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'ps-language',
            'content' => strtolower(\Drupal::languageManager()
              ->getCurrentLanguage()
              ->getId()),
          ],
        ],
        'price-spider' => [
          '#tag' => 'script',
          '#attributes' => [
            'src' => '//cdn.pricespider.com/1/lib/ps-widget.js',
            'async' => TRUE,
          ],
        ],
      ];
      foreach ($metatags as $key => $metatag) {
        $build['#attached']['html_head'][] = [$metatag, $key];
      }
    }
    elseif (isset($vendor) && $vendor == PdpHeroBlock::VENDOR_COMMERCE_CONNECTOR) {
      $locale = \Drupal::languageManager()
        ->getCurrentLanguage()->getId();

      $build['#attached']['drupalSettings']['cc'] = [
        'data-token' => $wtb_confg->get('data_token'),
        'data-locale' => $wtb_confg->get('data_locale'),
        'data-displaylanguage' => $locale,
        'data-widgetid' => $wtb_confg->get('widget_id'),
        'data-subid' => $wtb_confg->get('data_subid'),
      ];
      $build['#attached']['library'][] = 'mars_product/mars_product.commerce_connector';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_node__product__card(array &$variables) {
  product_card_add_wtb_vars($variables);
  product_card_add_datalayer_vars($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_node__product_multipack__card(array &$variables) {
  product_card_add_wtb_vars($variables);
  product_card_add_datalayer_vars($variables);
}

/**
 * Add Where to buy related vars.
 *
 * @param array $variables
 *   Variables.
 */
function product_card_add_wtb_vars(array &$variables) {
  $show_rating_and_reviews = NULL;
  $wtb_config = \Drupal::config('mars_product.wtb.settings');
  $variables['wtb_commerce_vendor'] = $wtb_config->get('commerce_vendor') ?? NULL;
  $variables['wtb_button_type'] = $wtb_config->get('button_type') ?? NULL;
  $variables['wtb_widget_id'] = $wtb_config->get('widget_id') ?? NULL;

  $variants = $variables['node']
    ->get('field_product_variants')
    ->referencedEntities();
  $variant = reset($variants);
  if ($variant !== FALSE) {
    $product_sku = trim($variant->get('field_product_sku')->value);
    if ($variables['node']->hasField('field_rating_and_reviews') &&
      $variables['node']->hasField('field_override_global_rating') &&
      $variables['node']->get('field_override_global_rating')->value == TRUE
    ) {
      $show_rating_and_reviews = $variables['node']->get('field_rating_and_reviews')->value;
    }
    else {
      $show_rating_and_reviews = \Drupal::config('emulsifymars.settings')->get('show_rating_and_reviews');
    }
  }

  if ($show_rating_and_reviews) {
    if (EnvironmentDetector::isProdEnv()) {
      $variables['#attached']['library'][] = 'mars_product/mars_product.bazarrevoice_production';
    }
    else {
      $variables['#attached']['library'][] = 'mars_product/mars_product.bazarrevoice_staging';
    }
  }
  $variables['show_rating_and_reviews'] = $show_rating_and_reviews;
  $variables['wtb_product_sku'] = $product_sku ?? NULL;
}

/**
 * Add datalayer related vars.
 *
 * @param array $variables
 *   Variables.
 */
function product_card_add_datalayer_vars(array &$variables) {

  $node = $variables['node'];
  $terms = [];
  $field_defs = $node->getFieldDefinitions();
  foreach ($field_defs as $field_name => $field_def) {
    if ($field_def instanceof FieldConfigInterface &&
      $field_def->getType() == 'entity_reference' &&
      $field_def->getSetting('target_type') == 'taxonomy_term'
    ) {

      $term_entites = $node->get($field_name)->referencedEntities();
      foreach ($term_entites as $term_entity) {
        /* @var \Drupal\taxonomy\Entity\Term $term_entity */
        $terms[$term_entity->referencedEntities()[0]->label()][$term_entity->label()] = $term_entity->label();
      }
    }
  }

  $ga_taxonomy_data = NULL;
  if (!empty($terms)) {
    foreach ($terms as $vid => $term_labels) {
      $ga_taxonomy_data[$vid] = array_values($term_labels);
    }
  }
  $variables['datalayer_taxonomy'] = Json::encode($ga_taxonomy_data);
}

/**
 * Implements hook_form_alter().
 */
function mars_product_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_product_form' || $form_id == 'node_product_edit_form') {
    $form['field_rating_and_reviews']['#states'] = [
      'visible' => [
        ':input[name="field_override_global_rating[value]"]' => ['checked' => TRUE],
      ],
    ];
  }
}
