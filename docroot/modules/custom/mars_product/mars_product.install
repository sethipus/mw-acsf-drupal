<?php

/**
 * @file
 * Update scripts for the Mars Product module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Site\Settings;
use Drupal\layout_builder\SectionComponent;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\Core\Plugin\Context\EntityContext;
use Drupal\layout_builder_restrictions\Traits\PluginHelperTrait;
use Drupal\layout_builder\Section;
use Drupal\mars_product\Plugin\Block\PdpHeroBlock;
use Drupal\pathauto\Entity\PathautoPattern;
use Drupal\pathauto\PathautoState;

/**
 * Implements hook_update_N() for rating&reviews remove from theme config.
 */
function mars_product_update_8928() {
  \Drupal::configFactory()
    ->getEditable('emulsifymars.settings')
    ->clear('show_rating_and_reviews')
    ->save();
}

/**
 * Implements hook_update_N() for layout builder.
 */
function mars_product_update_8917() {
  $delta = 2;
  $region_to = 'all_regions';
  $plugin_block_id = 'rating_bazarvoice_block';

  /** @var \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay $display */
  $display = LayoutBuilderEntityViewDisplay::load('node.product.default');

  $contexts = [
    'display' => EntityContext::fromEntity($display),
  ];
  $section_storage_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
  /** @var Drupal\layout_builder\SectionStorageInterface $section_storage */
  $section_storage = $section_storage_manager->load('defaults', $contexts);

  $third_party_settings = $section_storage->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
  $layout_id = $section_storage->getSection($delta)->getLayoutId();

  $whitelisted_blocks = &$third_party_settings['whitelisted_blocks'][$layout_id];

  if (isset($whitelisted_blocks[$region_to])) {
    $definition = \Drupal::service('plugin.manager.block')->getDefinition($plugin_block_id);
    $category = PluginHelperTrait::getUntranslatedCategory($definition['category']);
    if (isset($whitelisted_blocks[$region_to][$category])) {
      if (!in_array($plugin_block_id, $whitelisted_blocks[$region_to][$category])) {
        $whitelisted_blocks[$region_to][$category][] = $plugin_block_id;
      }
    }
  }
  $section_storage->setThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', $third_party_settings);

  /** @var Drupal\layout_builder\Section $section */
  $section = $section_storage->getSection($delta);
  $components = $section->getComponents();

  if (empty($components)) {
    _mars_product_create_component($plugin_block_id, $section, $display);
  }
  else {
    $rating_exist = array_filter($components, function ($component) use ($plugin_block_id) {
      /** @var Drupal\layout_builder\SectionComponent $component */
      return $component->get('configuration')['id'] == $plugin_block_id;
    });
    if (empty($rating_exist)) {
      _mars_product_create_component($plugin_block_id, $section, $display);
    }
  }
}

/**
 * Add component.
 */
function _mars_product_create_component(string $plugin_block_id, Section $section, LayoutBuilderEntityViewDisplay $display) {
  $configuration = [
    'id' => $plugin_block_id,
    'label' => 'Rating Bazarvoice',
    'provider' => 'mars_product',
    'label_display' => 1,
    'product' => NULL,
    'context_mapping' => [
      'node' => 'layout_builder.entity',
    ],
  ];
  $section_component = new SectionComponent(\Drupal::service('uuid')->generate(), 'content', $configuration);
  $section->appendComponent($section_component);
  $display->save();
}

/**
 * Implements hook_update_N() for layout builder.
 */
function mars_product_update_8926() {
  $delta = 1;
  $region_to = 'all_regions';
  $plugin_block_id = 'rating_bazarvoice_block';

  /** @var \Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay $display */
  $display = LayoutBuilderEntityViewDisplay::load('node.campaign.default');

  $contexts = [
    'display' => EntityContext::fromEntity($display),
  ];

  $section_storage_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
  /** @var Drupal\layout_builder\SectionStorageInterface $section_storage */
  $section_storage = $section_storage_manager->load('defaults', $contexts);

  $third_party_settings = $section_storage->getThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', []);
  $layout_id = $section_storage->getSection($delta)->getLayoutId();

  $whitelisted_blocks = &$third_party_settings['whitelisted_blocks'][$layout_id];

  if (isset($whitelisted_blocks[$region_to])) {
    $definition = \Drupal::service('plugin.manager.block')->getDefinition($plugin_block_id);
    $category = PluginHelperTrait::getUntranslatedCategory($definition['category']);
    if (isset($whitelisted_blocks[$region_to][$category])) {
      if (!in_array($plugin_block_id, $whitelisted_blocks[$region_to][$category])) {
        $whitelisted_blocks[$region_to][$category][] = $plugin_block_id;
      }
    }
  }
  $section_storage->setThirdPartySetting('layout_builder_restrictions', 'entity_view_mode_restriction_by_region', $third_party_settings);
  $display->save();
}

/**
 * Update product multipack aliases.
 */
function mars_product_update_8927() {
  $entity_type_manager = \Drupal::entityTypeManager();
  $pattern_config = $entity_type_manager
    ->getStorage('pathauto_pattern')
    ->load('product');

  if (!$pattern_config instanceof PathautoPattern) {
    return;
  }

  $condition = $pattern_config->getSelectionCondition('42b5ded2-6b12-42d3-ae8d-52c767e3b43a');
  $condition_config = $condition->getConfiguration();
  $condition_config['bundles']['product_multipack'] = 'product_multipack';
  $condition->setConfiguration($condition_config);
  $pattern_config->save();

  $storage_handler = $entity_type_manager->getStorage('node');
  $multipack_products = $storage_handler->loadByProperties(['type' => 'product_multipack']);
  foreach ($multipack_products as $multipack_product) {
    if ($multipack_product->hasField('path')) {
      $multipack_product->path->pathauto = PathautoState::CREATE;
      $multipack_product->save();
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Import config ignore settings in order to avoid wtb config deletion.
 */
function mars_product_update_8929() {
  $config_path = Settings::get('config_sync_directory', FALSE);
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write(
    'config_ignore.settings',
    $source->read('config_ignore.settings')
  );
}

/**
 * Added new field 'field_product_fibre' to the nutrition table settings.
 */
function mars_product_update_8930() {
  $nutrition_helper = Drupal::service('mars_product.nutrition_data_helper');
  $nutrition_config = $nutrition_helper->getNutritionConfig();

  if (!$nutrition_config->isNew()) {
    // Get settings for the nutrition subgroup #3.
    $subgroup_3 = $nutrition_config->get(PdpHeroBlock::NUTRITION_SUBGROUP_3);

    // Get all existing field from subgroup #3
    // and check if 'field_product_fibre' doesn't exist.
    $group_fields = array_column($subgroup_3, 'field');
    if (array_search('field_product_fibre', $group_fields) === FALSE) {
      // Generate data for the new field.
      $new_field_data = [
        'bold' => '0',
        'daily_field' => 'none',
        'field' => 'field_product_fibre',
        'label' => 'Fibre',
        'remove' => 'remove',
        'weight' => '-5',
      ];

      // The new field should be inserted after 'field_product_total_sugars'.
      $insert_after = array_search(
        'field_product_total_sugars',
        $group_fields
      );

      if ($insert_after !== FALSE) {
        $new_field_data['weight'] = $subgroup_3[$insert_after]['weight'] + 1;
        array_splice($subgroup_3, $insert_after + 1, 0, [$new_field_data]);
      }
      else {
        // Add the new field at the end of subgroup #3
        // if 'field_product_total_sugars' doesn't exist.
        $subgroup_3[] = $new_field_data;
      }

      // Update config.
      $nutrition_config->set(PdpHeroBlock::NUTRITION_SUBGROUP_3, $subgroup_3);
      $nutrition_config->save();
    }
  }
}
