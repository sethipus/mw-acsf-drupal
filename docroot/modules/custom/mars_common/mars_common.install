<?php

/**
 * @file
 * Update scripts for the Mars Common module.
 */

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\mars_common\ThemeConfiguratorService;

/**
 * Implements hook_update_N().
 *
 * Delete all nodes of a "Contact & Help" content type.
 */
function mars_common_update_8001() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $entities = $storage_handler->loadByProperties(['type' => 'contact_help']);
  $storage_handler->delete($entities);
}

/**
 * Implements hook_update_N().
 *
 * Delete content type "Contact & Help".
 */
function mars_common_update_8002() {
  $content_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('contact_help');
  if ($content_type) {
    $content_type->delete();
  }
}

/**
 * Sanitize Multipack Products per node overridden layout (AB#190757).
 */
function mars_common_update_8003() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $multipack_products = $storage_handler->loadByProperties(['type' => 'product_multipack']);
  $product_multipack_block_id = 'pdp_product_multipack_block';
  foreach ($multipack_products as $multipack_product) {
    $display = $multipack_product->layout_builder__layout ?? NULL;
    if (!$display) {
      continue;
    }

    foreach ($display->getSections() as $section) {
      foreach ($section->getComponents() as $component) {
        if ($component->getPluginId() === $product_multipack_block_id) {
          $section->removeComponent($component->getUuid());
          $multipack_product->save();
        }
      }
    }
  }
}

/**
 * Hide footer block at error page (AB#184643).
 */
function mars_common_update_8004() {
  /* @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')->getEditable('block.block.footerblock');
  $config->set('visibility', [
    'entity_bundle:node' => [
      'id' => 'entity_bundle:node',
      'bundles' => ['error_page' => 'error_page'],
      'negate' => TRUE,
      'context_mapping' => ['node' => '@node.node_route_context:node'],
    ],
  ]);
  $config->save();
}

/**
 * Update image field definition.
 */
function mars_common_update_8005() {
  // Update field field_ff_item_image.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_ff_item_image', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_inline_image_file.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_inline_image_file', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_list_item_image.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_list_item_image', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_full_image_file.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_full_image_file', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_allergen_image.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_allergen_image', 'taxonomy_term');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
}

/**
 * Increase the length of "field_description" to 255 characters for poll entity.
 */
function mars_common_update_8006() {
  // Resize column.
  $database = \Drupal::database();
  $database->query("ALTER TABLE poll__field_description MODIFY field_description_value VARCHAR(255)");

  // Update storage schema.
  $storage_key = 'poll.field_schema_data.field_description';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['poll__field_description']['fields']['field_description_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);

  // Update field configuration.
  $config = \Drupal::configFactory()
    ->getEditable('field.storage.poll.field_description');
  $config->set('settings.max_length', 255);
  $config->save(TRUE);

  FieldStorageConfig::loadByName('poll', 'field_description')->save();
}

/**
 * Delete old card color config.
 */
function mars_common_update_8007() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('card_color.settings');
  $config->delete();
}

/**
 * Delete syslog logs from the public filesystem.
 */
function mars_common_update_8009() {
  \Drupal::service('file_system')->deleteRecursive('public://logs/archive');
  \Drupal::service('file_system')->delete('public://logs/drupal.log');
}

/**
 * Enable dependency module.
 */
function mars_common_update_8010() {
  $modules = [
    'mars_media',
  ];
  \Drupal::service('module_installer')->install($modules);
}

/**
 * Update 'field_recipe_cooking_time' field storage definitions.
 */
function mars_common_update_8011() {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('field_recipe_cooking_time', 'node');
  $entity_definition_update_manager->updateFieldStorageDefinition($field_storage_definition);
}

/**
 * Add letter spacing configuration.
 */
function mars_common_update_8012() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('headline_font_mobile_letterspacing', ThemeConfiguratorService::LETTERSPACING_MOBILE_DEFAULT);
  $config->set('headline_font_tablet_letterspacing', ThemeConfiguratorService::LETTERSPACING_TABLET_DEFAULT);
  $config->set('headline_font_desktop_letterspacing', ThemeConfiguratorService::LETTERSPACING_DESKTOP_DEFAULT);
  $config->set('primary_font_mobile_letterspacing', ThemeConfiguratorService::LETTERSPACING_MOBILE_DEFAULT);
  $config->set('primary_font_tablet_letterspacing', ThemeConfiguratorService::LETTERSPACING_TABLET_DEFAULT);
  $config->set('primary_font_desktop_letterspacing', ThemeConfiguratorService::LETTERSPACING_DESKTOP_DEFAULT);
  $config->set('secondary_font_mobile_letterspacing', ThemeConfiguratorService::LETTERSPACING_MOBILE_DEFAULT);
  $config->set('secondary_font_tablet_letterspacing', ThemeConfiguratorService::LETTERSPACING_TABLET_DEFAULT);
  $config->set('secondary_font_desktop_letterspacing', ThemeConfiguratorService::LETTERSPACING_DESKTOP_DEFAULT);
  $config->save();
}

/**
 * Update modules registry for modules moved to Composer.
 */
function mars_common_update_8013() {
  \Drupal::service('extension.list.module')->reset();
  \Drupal::cache()->invalidateAll();
}

/**
 * Install 'layout builder at' module in order to fix installation issue.
 */
function mars_common_update_8014() {
  \Drupal::service('module_installer')
    ->install(['layout_builder_at']);
}
