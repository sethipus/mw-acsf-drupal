<?php

/**
 * @file
 * Update scripts for the Mars Common module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Config\Entity\ConfigEntityUpdater;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\mars_common\ThemeConfiguratorService;

/**
 * Implements hook_update_N().
 *
 * Delete all nodes of a "Contact & Help" content type.
 */
function mars_common_update_8001() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $entities = $storage_handler->loadByProperties(['type' => 'contact_help']);
  $storage_handler->delete($entities);
}

/**
 * Implements hook_update_N().
 *
 * Delete content type "Contact & Help".
 */
function mars_common_update_8002() {
  $content_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('contact_help');
  if ($content_type) {
    $content_type->delete();
  }
}

/**
 * Sanitize Multipack Products per node overridden layout (AB#190757).
 */
function mars_common_update_8003() {
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $multipack_products = $storage_handler->loadByProperties(['type' => 'product_multipack']);
  $product_multipack_block_id = 'pdp_product_multipack_block';
  foreach ($multipack_products as $multipack_product) {
    $display = $multipack_product->layout_builder__layout ?? NULL;
    if (!$display) {
      continue;
    }

    foreach ($display->getSections() as $section) {
      foreach ($section->getComponents() as $component) {
        if ($component->getPluginId() === $product_multipack_block_id) {
          $section->removeComponent($component->getUuid());
          $multipack_product->save();
        }
      }
    }
  }
}

/**
 * Hide footer block at error page (AB#184643).
 */
function mars_common_update_8004() {
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')->getEditable('block.block.footerblock');
  $config->set('visibility', [
    'entity_bundle:node' => [
      'id' => 'entity_bundle:node',
      'bundles' => ['error_page' => 'error_page'],
      'negate' => TRUE,
      'context_mapping' => ['node' => '@node.node_route_context:node'],
    ],
  ]);
  $config->save();
}

/**
 * Update image field definition.
 */
function mars_common_update_8005() {
  // Update field field_ff_item_image.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_ff_item_image', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_inline_image_file.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_inline_image_file', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_list_item_image.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_list_item_image', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_full_image_file.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_full_image_file', 'block_content');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
  // Update field_allergen_image.
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definition = $definition_update_manager->getFieldStorageDefinition('field_allergen_image', 'taxonomy_term');
  $definition_update_manager->updateFieldStorageDefinition($field_definition);
}

/**
 * Increase the length of "field_description" to 255 characters for poll entity.
 */
function mars_common_update_8006() {
  // Resize column.
  $database = \Drupal::database();
  $database->query("ALTER TABLE poll__field_description MODIFY field_description_value VARCHAR(255)");

  // Update storage schema.
  $storage_key = 'poll.field_schema_data.field_description';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['poll__field_description']['fields']['field_description_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);

  // Update field configuration.
  $config = \Drupal::configFactory()
    ->getEditable('field.storage.poll.field_description');
  $config->set('settings.max_length', 255);
  $config->save(TRUE);

  FieldStorageConfig::loadByName('poll', 'field_description')->save();
}

/**
 * Delete old card color config.
 */
function mars_common_update_8007() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('card_color.settings');
  $config->delete();
}

/**
 * Delete syslog logs from the public filesystem.
 */
function mars_common_update_8009() {
  \Drupal::service('file_system')->deleteRecursive('public://logs/archive');
  \Drupal::service('file_system')->delete('public://logs/drupal.log');
}

/**
 * Enable dependency module.
 */
function mars_common_update_8010() {
  $modules = [
    'mars_media',
  ];
  \Drupal::service('module_installer')->install($modules);
}

/**
 * Update 'field_recipe_cooking_time' field storage definitions.
 */
function mars_common_update_8011() {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('field_recipe_cooking_time', 'node');
  $entity_definition_update_manager->updateFieldStorageDefinition($field_storage_definition);
}

/**
 * Add letter spacing configuration.
 */
function mars_common_update_8012() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('headline_font_mobile_letterspacing', ThemeConfiguratorService::LETTERSPACING_MOBILE_DEFAULT);
  $config->set('headline_font_tablet_letterspacing', ThemeConfiguratorService::LETTERSPACING_TABLET_DEFAULT);
  $config->set('headline_font_desktop_letterspacing', ThemeConfiguratorService::LETTERSPACING_DESKTOP_DEFAULT);
  $config->set('primary_font_mobile_letterspacing', ThemeConfiguratorService::LETTERSPACING_MOBILE_DEFAULT);
  $config->set('primary_font_tablet_letterspacing', ThemeConfiguratorService::LETTERSPACING_TABLET_DEFAULT);
  $config->set('primary_font_desktop_letterspacing', ThemeConfiguratorService::LETTERSPACING_DESKTOP_DEFAULT);
  $config->set('secondary_font_mobile_letterspacing', ThemeConfiguratorService::LETTERSPACING_MOBILE_DEFAULT);
  $config->set('secondary_font_tablet_letterspacing', ThemeConfiguratorService::LETTERSPACING_TABLET_DEFAULT);
  $config->set('secondary_font_desktop_letterspacing', ThemeConfiguratorService::LETTERSPACING_DESKTOP_DEFAULT);
  $config->save();
}

/**
 * Update modules registry for modules moved to Composer.
 */
function mars_common_update_8013() {
  \Drupal::service('extension.list.module')->reset();
  \Drupal::cache()->invalidateAll();
}

/**
 * Install 'layout builder at' module in order to fix installation issue.
 */
function mars_common_update_8014() {
  \Drupal::service('module_installer')
    ->install(['layout_builder_at']);
}

/**
 * Set default value for nutrition table visibility option.
 */
function mars_common_update_8015() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('show_nutrition_info', TRUE);
  $config->save();
}

/**
 * Update jquery_colorpicker values for theme configurations.
 *
 * Add '#' to the values.
 */
function mars_common_update_8018() {
  $color_fields_map = [
    'color_a',
    'color_b',
    'color_c',
    'color_d',
    'color_e',
    'color_f',
    'top_nav',
    'top_nav_gradient',
    'top_footer',
    'top_footer_gradient',
    'cookie_banner',
    'cookie_banner_gradient',
    'bottom_nav',
    'card_background',
    'card_title',
    'card_eyebrow',
  ];

  $config = \Drupal::service('config.factory')->getEditable('emulsifymars.settings');
  $data = $config->getRawData();
  \Drupal::service('config.factory')->getEditable('emulsifymars.settings');
  foreach ($color_fields_map as $color_field) {
    if (!empty($data[$color_field]) && $data[$color_field][0] != '#') {
      $data[$color_field] = '#' . $data[$color_field];
    }
  }

  $config->setData($data)->save();
}

/**
 * Import layout_selection field for Basic Page CT.
 */
function mars_common_update_8021(&$sandbox = []) {
  $config_entity_updater = \Drupal::classResolver(ConfigEntityUpdater::class);
  try {
    $config_entity_updater->update($sandbox, 'entity_view_display');
  }
  catch (\Exception $e) {
    \Drupal::logger('my_module')->error($e->getMessage());
  }
}

/**
 * Update jquery_colorpicker values for header and footer configurations.
 *
 * Add '#' to the values.
 */
function mars_common_update_8023() {
  $blocks = [
    'marsheaderblock' => [
      'alert_banner' => ['bg_color', 'text_color'],
      'override_text_color' => [
        'hover_color',
        'mobile_cross_hamburger',
        'mobile_main_menu_items_color',
        'mobile_search_right_menu_section',
        'mobile_sub_menu_items_color',
      ],
    ],
    'footerblock' => [
      'override_text_color' => ['hover_color'],
    ],
  ];

  foreach ($blocks as $block_name => $parent_fields) {
    $block = Block::load($block_name);

    if (empty($block)) {
      continue;
    }

    $settings = $block->get('settings');

    foreach ($parent_fields as $parent_field_name => $field_names) {
      foreach ($field_names as $field_name) {
        if (
          isset($settings[$parent_field_name][$field_name][0]) &&
          $settings[$parent_field_name][$field_name][0] != '#'
        ) {
          $settings[$parent_field_name][$field_name] = '#' . $settings[$parent_field_name][$field_name];
        }
      }
    }
    $block->set('settings', $settings);
    $block->save();
  }
}

/*
 * Update jquery_colorpicker values for custom blocks. Add '#' to the values.
 */
function mars_common_update_8024() {
  $color_fields_map = [
    'parent_page_header' => ['text_color_other'],
    'homepage_hero_block' => ['background_color'],
    'recipe_detail_hero' => ['custom_background_color'],
    'freeform_story_block' => ['custom_background_color'],
    'pdp_hero_block' => ['background_color', 'brand_shape_color'],
  ];

  $color_fields = array_reduce($color_fields_map, 'array_merge', []);

  $database = \Drupal::database();
  $query = $database->select('node__layout_builder__layout', 'lb');
  $query->fields('lb', ['entity_id']);
  $orGroup = $query->orConditionGroup();
  foreach ($color_fields as $color_field) {
    $orGroup->condition('lb.layout_builder__layout_section','%' . $color_field . '%', 'LIKE');
  }
  $query->condition($orGroup);

  $results = array_unique($query->execute()->fetchCol());

  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');

  foreach ($results as $entity_id) {
    $node = $storage_handler->load($entity_id);
    foreach ($node->getTranslationLanguages() as $langcode => $language) {
      $translation = $node->getTranslation($langcode);

      foreach ($translation->layout_builder__layout->getSections() as $section) {
        foreach ($section->getComponents() as $component) {

          $configs = $component->get('configuration');
          if (!isset($color_fields_map[$configs['id']])) {
            continue;
          }
          foreach ($color_fields_map[$configs['id']] as $field) {
            if (!empty($configs[$field]) && $configs[$field][0] != '#') {
              $configs[$field] = '#' . $configs[$field];
              $component->setConfiguration($configs);
            }
          }
        }
      }
      $translation->save();
    }
  }
}

/**
 * Add top footer and top footer gradient fields to theme configurator.
 */
function mars_common_update_8025() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('footer_top', $config->get('top_nav'), '');
  $config->set('footer_top_gradient', $config->get('top_nav_gradient'), '');
  $config->save(TRUE);
}

/**
 * Add cookie banner fields to theme configurator.
 */
function mars_common_update_8026() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('cookie_banner', $config->get('color_b'), '');
  $config->set('cookie_banner_gradient', $config->get('color_b'), '');
  $config->save(TRUE);
}

/**
 * Add card color fields to theme configurator.
 */
function mars_common_update_8027() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('card_title', $config->get('color_a'), '');
  $config->set('card_eyebrow', $config->get('color_a'), '');
  $config->save(TRUE);
}

/**
 * Add cookie_banner_text field to theme configurator.
 */
function mars_common_update_8028() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('cookie_banner_text', $config->get('color_a'), '');
  $config->set('cookie_banner_text', $config->get('color_a'), '');
  $config->set('cookie_banner_brand_border', FALSE);
  $config->save(TRUE);
}

/**
 * Add entrygate field to theme configurator.
 */
function mars_common_update_8029() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('emulsifymars.settings');
  $config->set('entrygate_background_color', $config->get('color_d'), '');
  $config->set('entrygate_title_color', $config->get('color_a'), '');
  $config->set('entrygate_text_color', $config->get('color_a'), '');
  $config->set('entrygate_date_color', $config->get('color_a'), '');
  $config->set('entrygate_alert_color', $config->get('color_b'), '');
  $config->save(TRUE);
}
