<?php

/**
 * @file
 * MARS Common module main file.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
use Drupal\mars_common\Form\Alter\AboutPageLayoutFormAlter;
use Drupal\mars_common\Form\Alter\LandingPageLayoutFormAlter;
use Drupal\mars_common\Form\Alter\SearchLayoutFormAlter;
use Drupal\node\Entity\Node;
use Drupal\mars_common\Form\Alter\ContactHelpLayoutFormAlter;
use Drupal\layout_builder\Form\DefaultsEntityForm;
use Drupal\mars_common\Form\Alter\NewsletterSignUpLayoutFormAlter;
use Drupal\mars_common\Form\Alter\WhereToBuyLayoutFormAlter;
use Drupal\mars_common\Form\Alter\RecipeLayoutFormAlter;
use Drupal\mars_common\Form\Alter\HomepageLayoutFormAlter;
use Drupal\mars_common\Form\Alter\ArticleLayoutFormAlter;
use Drupal\mars_common\Form\Alter\ProductLayoutFormAlter;
use Drupal\mars_common\Form\Alter\ContentHubPageLayoutFormAlter;
use Drupal\mars_common\Form\Alter\CampaignLayoutFormAlter;
use Drupal\layout_builder\Form\OverridesEntityForm;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\system\Entity\Menu;
use Drupal\taxonomy\TermInterface;
use Drupal\Core\Cache\Cache;
use Drupal\mars_common\Plugin\Block\FooterBlock;
use Drupal\mars_common\Constants\MenuConstants;

/**
 * Implements hook_menu_insert().
 */
function mars_common_menu_insert(Menu $menu) {
  if (in_array($menu->id(), ['main', 'error-page-menu'])) {
    foreach (['Home', 'Products', 'About'] as $weight => $title) {
      $menu_link = MenuLinkContent::create([
        'title' => $title,
        'link' => ['uri' => 'internal:/'],
        'menu_name' => $menu->id(),
        'expanded' => TRUE,
        'weight' => $weight - 3,
      ]);
      $menu_link->save();
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function mars_common_preprocess(&$variables, $hook) {
  /** @var \Drupal\mars_common\ThemeConfiguratorParser $themeParser */

  if ($hook === 'views_view__grid_card') {
    $themeParser = Drupal::service('mars_common.theme_configurator_parser');
    $file_divider_content = $themeParser->getGraphicDivider();
    $file_border_content = $themeParser->getBrandBorder2();
    $border_radius = Drupal::config('emulsifymars.settings')
      ->get('button_style');

    $variables['theme_styles'] = 'drupal';
    $variables['graphic_divider'] = $file_divider_content ?? '';
    $variables['brand_border'] = $file_border_content ?? '';
    $variables['ajax_card_grid_heading'] = $variables['view']->args[0] ?? '';
    $variables['ajax_card_grid_link_text'] = 'See All';
    $variables['ajax_card_grid_border_radius'] = $border_radius ?? 0;
  }

  $view_mode_is_card =
    isset($variables['view_mode']) &&
    $variables['view_mode'] === 'card';

  $is_article_card =
    $hook === 'node' &&
    $view_mode_is_card &&
    isset($variables['node']) &&
    $variables['node'] instanceof Node &&
    $variables['node']->bundle() === 'article';

  if ($is_article_card || $hook === 'poll_results') {
    $themeParser = Drupal::service('mars_common.theme_configurator_parser');
    $brand_shape_content = $themeParser->getBrandShapeWithoutFill();
    $variables['brand_shape'] = $brand_shape_content ?? '';
  }

  if ($hook === 'poll_vote' || $hook === 'poll_results') {
    $themeParser = Drupal::service('mars_common.theme_configurator_parser');
    $variables['polling_png_asset'] = $themeParser->getUrlForFile('png_asset');
  }

  if ($hook === 'views_infinite_scroll_pager__grid_card') {
    $border_radius = Drupal::config('emulsifymars.settings')
      ->get('button_style');
    $variables['default_link_border_radius'] = $border_radius ?? 0;
  }
}

/**
 * Implements hook_theme().
 */
function mars_common_theme($existing, $type, $theme, $path) {
  return [
    'header_block' => [
      'variables' => [
        'logo'              => NULL,
        'primary_menu'      => NULL,
        'secondary_menu'    => NULL,
        'search_menu'       => NULL,
        'language_selector' => NULL,
        'language_selector_current' => NULL,
        'language_selector_label' => NULL,
        'language_selector_items' => NULL,
        'search_block'      => NULL,
        'alert_banner_text' => NULL,
        'alert_banner_url'  => NULL,
        'search_form'       => NULL,
      ],
      'template' => 'block--mars-common--header',
    ],
    'footer_block' => [
      'variables' => [
        'logo'                 => NULL,
        'brand_border'         => NULL,
        'social_links'         => NULL,
        'top_footer_menu'      => NULL,
        'legal_links'          => NULL,
        'marketing'            => NULL,
        'corporate_tout_text'  => NULL,
        'corporate_tout_url'    => NULL,
        'region_selector'      => NULL,
        'current_region_title' => NULL,
      ],
      'template' => 'footer-block',
    ],
    'content_feature_module_block' => [
      'variables' => [
        'eyebrow' => NULL,
        'title' => NULL,
        'background' => NULL,
        'description' => NULL,
        'explore_cta' => NULL,
        'explore_cta_link' => NULL,
        'border_radius' => NULL,
        'graphic_divider' => NULL,
      ],
      'template' => 'content-feature-module-block',
    ],
    'social_feed_block' => [
      'variables' => [
        'label' => '',
        'items' => [],
        'graphic_divider' => '',
        'brand_border' => '',
      ],
    ],
    'flexible_driver_block' => [
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'cta_label' => NULL,
        'cta_link' => NULL,
        'asset_1' => NULL,
        'asset_2' => NULL,
      ],
    ],
    'story_highlight_block' => [
      'variables' => [
        'brand_border' => NULL,
        'title' => NULL,
        'graphic_divider' => NULL,
        'story_description' => NULL,
        'story_items' => [],
        'svg_asset_src_1' => NULL,
        'svg_asset_src_2' => NULL,
        'svg_asset_src_3' => NULL,
        'svg_asset_alt_1' => NULL,
        'svg_asset_alt_2' => NULL,
        'svg_asset_alt_3' => NULL,
        'view_more_cta_url' => NULL,
        'view_more_cta_label' => NULL,
      ],
      'template' => 'story-highlight-block',
    ],
    'parent_page_header_block' => [
      'variables' => [
        'eyebrow' => NULL,
        'label' => NULL,
        'background' => NULL,
        'description' => NULL,
        'media_type' => NULL,
        'media_format' => NULL,
      ],
      'template' => 'parent-page-header-block',
    ],
    'file_text_item_widget' => [
      'render element' => 'element',
    ],
    'carousel_item_formatter' => [
      'variables' => [
        'item_url' => NULL,
        'item_description' => NULL,
        'media_type' => NULL,
      ],
    ],
    'list_item_formatter' => [
      'variables' => [
        'item_url' => NULL,
        'item_description' => NULL,
      ],
    ],
    'product_feature_block' => [
      'variables' => [
        'eyebrow' => NULL,
        'title' => NULL,
        'background_color' => NULL,
        'image_src' => NULL,
        'image_alt' => NULL,
        'explore_cta' => NULL,
        'explore_cta_link' => NULL,
      ],
      'template' => 'product-feature-block',
    ],
    'newsletter_signup_form_block' => [
      'variables' => [
        'form_url' => NULL,
        'accessibility_title' => NULL,
      ],
      'template' => 'newsletter-signup-form-block',
    ],
    'contact_form_block' => [
      'variables' => [
        'form_id' => NULL,
      ],
      'template' => 'contact-form-block',
    ],
    'error_page_block' => [
      'variables' => [
        'title' => NULL,
        'body' => NULL,
        'links' => NULL,
        'image_src' => NULL,
        'image_alt' => NULL,
        'graphic_divider' => NULL,
        'brand_shape' => NULL,
      ],
      'template' => 'error-page-block',
    ],
    'contact_help_banner_block' => [
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'social_links_label' => NULL,
        'phone_cta_label' => NULL,
        'phone_cta_link' => NULL,
        'email_cta_label' => NULL,
        'email_cta_link' => NULL,
        'help_and_contact_cta_label' => NULL,
        'help_and_contact_cta_url' => NULL,
        'social_menu_items' => NULL,
        'brand_shape' => NULL,
      ],
      'template' => 'contact-help-banner-block',
    ],
    'iframe_block' => [
      'variables' => [
        'url' => NULL,
        'accessibility_title' => NULL,
      ],
      'template' => 'iframe-block',
    ],
    'freeform_story_block' => [
      'variables' => [
        'block_aligned' => NULL,
        'header_1' => NULL,
        'header_2' => NULL,
        'body' => NULL,
        'background_shape' => NULL,
        'image' => NULL,
        'image_alt' => NULL,
        'brand_shape' => NULL,
        'custom_background_color' => NULL,
        'use_custom_color' => NULL,
      ],
      'template' => 'freeform-story-block',
    ],
    'poll_block' => [
      'variables' => [
        'poll' => NULL,
      ],
      'template' => 'poll-block',
    ],
    'where_to_buy_block' => [
      'template' => 'where-to-buy-block',
      'variables' => [
        'commerce_vendor' => NULL,
        'product_id' => NULL,
        'cta_title' => NULL,
        'button_type' => NULL,
        'widget_id' => NULL,
        'data_token' => NULL,
        'data_subid' => NULL,
        'data_locale' => NULL,
        'data_displaylanguage' => NULL,
        'products' => NULL,
        'default_product' => NULL,
      ],
    ],
    'text_block' => [
      'variables' => [
        'drop_cap' => NULL,
        'content' => NULL,
      ],
      'template' => 'text-block',
    ],
    'inline_image_video_block' => [
      'variables' => [
        'block_type' => NULL,
        'video_src' => NULL,
        'image_src' => NULL,
        'image_alt' => NULL,
        'image_title' => NULL,
        'shape_motif' => NULL,
        'content' => NULL,
        'title' => NULL,
      ],
      'template' => 'inline-image-video-block',
    ],
    'fullwidth_image_video_block' => [
      'variables' => [
        'block_type' => NULL,
        'media' => NULL,
        'shape_motif' => NULL,
        'content' => NULL,
        'heading' => NULL,
      ],
      'template' => 'fullwidth-image-video-block',
    ],
    'list_component' => [
      'variables' => [
        'label' => NULL,
        'ol_items' => NULL,
      ],
      'template' => 'block--mars-common--list-component',
    ],
    'carousel_component' => [
      'variables' => [
        'brand_borders' => NULL,
        'title' => NULL,
        'items' => NULL,
      ],
      'template' => 'block--mars-common--media-carousel',
    ],
    'flexible_framer_block' => [
      'variables' => [
        'grid_label' => NULL,
        'grid_type' => NULL,
        'item_type' => NULL,
        'items' => NULL,
        'brand_borders' => NULL,
        'divider' => NULL,
      ],
      'template' => 'flexible-framer-block',
    ],
    'js_block' => [
      'variables' => [
        'js_code' => NULL,
      ],
      'template' => 'js-block',
    ],
  ];
}

/**
 * Implements hook_entity_operation().
 */
function mars_common_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (!(\Drupal::currentUser()->hasPermission('administer polls'))) {
    return;
  }
  $entityTypeId = $entity->getEntityTypeId();
  if ($entityTypeId === 'poll') {
    $operations['results'] = [
      'title' => t('Results'),
      'url' => Url::fromRoute('mars_common.poll.votes', ['poll' => $entity->id()]),
      'weight' => 10,
    ];
  }
}

/**
 * Prepares variables for carousel item widget templates.
 *
 * Default template: carousel-item-widget.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the carousel item field widget.
 */
function mars_common_preprocess_file_text_item_widget(array &$variables) {
  $element = $variables['element'];

  $variables['attributes'] = [
    'class' => [
      'carousel-item-widget',
      'js-form-managed-file',
      'form-managed-file',
      'clearfix',
    ],
  ];

  $variables['data'] = [];
  foreach (Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__media_carousel(array &$variables) {
  $field_carousel_title = $variables['content']['field_carousel_title'];
  $field_carousel_items = $variables['content']['field_carousel_items'];

  /** @var \Drupal\mars_common\ThemeConfiguratorParser $themeParser */
  $themeParser = Drupal::service('mars_common.theme_configurator_parser');
  $file_content = $themeParser->getBrandBorder();

  $media_items = [];
  foreach ($field_carousel_items as $item_key => $item_value) {
    if (is_numeric($item_key)) {
      $media_items[] = [
        'src' => $item_value['#item_url']->getUri(),
        'content' => $item_value['#item_description'],
        'video' => ($item_value['#media_type'] == 'video'),
        'image' => ($item_value['#media_type'] == 'image'),
        'alt' => NULL,
        'title' => NULL,
      ];
    }
  }

  $variables['title'] = $field_carousel_title['#items'][0]->value;
  $variables['items'] = $media_items;
  $variables['brand_borders'] = $file_content ?? '';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__list(array &$variables) {
  /** @var \Drupal\mars_common\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_common.media_helper');

  $field_list_items = $variables['content']['field_list_items_reference'];

  $ol_items = [];
  foreach ($field_list_items as $item_key => $item_value) {
    if (is_numeric($item_key)) {

      $item_block = $item_value['#options']['entity'];
      $field_desc_val = $item_block->get('field_list_item_description')->value;
      $field_item_order = $item_block->get('field_list_item_order')->value;

      $item = [
        'content' => $field_desc_val,
        'item_number' => $field_item_order,
      ];

      if (!$item_block->get('field_list_item_image')->isEmpty()) {
        $media_id = $item_block
          ->get('field_list_item_image')
          ->first()
          ->target_id;

        $media_params = $media_helper->getMediaParametersById($media_id);
        if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
          $item['image'] = [
            'src' => $media_params['src'],
            'alt' => $media_params['alt'],
            'title' => $media_params['title'],
          ];
        }
      }

      $ol_items[] = $item;
    }
  }

  $variables['ol_items'] = $ol_items;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__text_component(array &$variables) {
  $field_body = $variables['content']['field_text_component_body'];
  $field_drop_cap = $variables['content']['field_text_component_drop_cap'];
  $variables['content'] = $field_body['#items'][0]->value;
  $variables['drop_cap'] = $field_drop_cap['#items'][0]->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__inline_image(array &$variables) {
  /** @var \Drupal\mars_common\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_common.media_helper');

  /** @var \Drupal\block_content\BlockContentInterface $block */
  $block = $variables['content']['#block_content'];

  if (!$block->get('field_inline_image_file')->isEmpty()) {
    $media_id = $block
      ->get('field_inline_image_file')
      ->first()
      ->target_id;

    $media_params = $media_helper->getMediaParametersById($media_id);
    if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
      $variables['image_src'] = $media_params['src'];
      $variables['image_alt'] = $media_params['alt'];
      $variables['image_title'] = $media_params['title'];
    }
  }

  if (!$block->get('field_inline_image_svg_asset')->isEmpty()) {
    $variables['shape_motif'] = (bool) $block
      ->get('field_inline_image_svg_asset')
      ->first()
      ->value;
  }

  if (!$block->get('field_inline_image_description')->isEmpty()) {
    $variables['content'] = $block
      ->get('field_inline_image_description')
      ->first()
      ->value;
  }

  if (!$block->get('field_inline_image_title')->isEmpty()) {
    $variables['title'] = $block
      ->get('field_inline_image_title')
      ->first()
      ->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__inline_video(array &$variables) {
  /** @var \Drupal\mars_common\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_common.media_helper');

  /** @var \Drupal\block_content\BlockContentInterface $block */
  $block = $variables['content']['#block_content'];

  if (!$block->get('field_inline_video')->isEmpty()) {
    $media_id = $block
      ->get('field_inline_video')
      ->first()
      ->target_id;

    $media_params = $media_helper->getMediaParametersById($media_id);
    if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
      $variables['video_src'] = $media_params['src'];
    }
  }

  if (!$block->get('field_inline_video_svg_asset')->isEmpty()) {
    $variables['shape_motif'] = (bool) $block
      ->get('field_inline_video_svg_asset')
      ->first()
      ->value;
  }

  if (!$block->get('field_inline_video_description')->isEmpty()) {
    $variables['content'] = $block
      ->get('field_inline_video_description')
      ->first()
      ->value;
  }

  if (!$block->get('field_inline_video_title')->isEmpty()) {
    $variables['title'] = $block
      ->get('field_inline_video_title')
      ->first()
      ->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__full_width_image(array &$variables) {
  /** @var \Drupal\mars_common\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_common.media_helper');

  /** @var \Drupal\block_content\BlockContentInterface $block */
  $block = $variables['content']['#block_content'];

  if (!$block->get('field_full_image_file')->isEmpty()) {
    $media_id = $block
      ->get('field_full_image_file')
      ->first()
      ->target_id;

    $media_params = $media_helper->getMediaParametersById($media_id);
    if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
      $variables['media']['image'] = TRUE;
      $variables['media']['src'] = $media_params['src'];
      $variables['media']['alt'] = $media_params['alt'];
      $variables['media']['title'] = $media_params['title'];
    }
  }

  if (!$block->get('field_full_image_svg_asset')->isEmpty()) {
    $variables['shape_motif'] = (bool) $block
      ->get('field_full_image_svg_asset')
      ->first()
      ->value;
  }

  if (!$block->get('field_full_image_description')->isEmpty()) {
    $variables['content'] = $block
      ->get('field_full_image_description')
      ->first()
      ->value;
  }

  if (!$block->get('field_full_image_title')->isEmpty()) {
    $variables['heading'] = $block
      ->get('field_full_image_title')
      ->first()
      ->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__full_width_video(array &$variables) {
  /** @var \Drupal\mars_common\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_common.media_helper');

  /** @var \Drupal\block_content\BlockContentInterface $block */
  $block = $variables['content']['#block_content'];

  if (!$block->get('field_full_video')->isEmpty()) {
    $media_id = $block
      ->get('field_full_video')
      ->first()
      ->target_id;

    $media_params = $media_helper->getMediaParametersById($media_id);
    if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
      $variables['media']['video'] = TRUE;
      $variables['media']['src'] = $media_params['src'];
    }
  }

  if (!$block->get('field_full_video_svg_asset')->isEmpty()) {
    $variables['shape_motif'] = (bool) $block
      ->get('field_full_video_svg_asset')
      ->first()
      ->value;
  }

  if (!$block->get('field_full_video_description')->isEmpty()) {
    $variables['content'] = $block
      ->get('field_full_video_description')
      ->first()
      ->value;
  }

  if (!$block->get('field_full_video_title')->isEmpty()) {
    $variables['heading'] = $block
      ->get('field_full_video_title')
      ->first()
      ->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__flexible_framer(array &$variables) {
  /** @var \Drupal\mars_common\MediaHelper $media_helper */
  $media_helper = \Drupal::service('mars_common.media_helper');

  $field_ff_items = $variables['content']['field_ff_items_reference'];
  $field_ff_title = $variables['content']['field_ff_title']['#items']->value;

  $with_cta_flag = (bool) $variables['content']['field_ff_with_cta']['#items']->value;
  $with_image_flag = (bool) $variables['content']['field_ff_with_image']['#items']->value;
  $with_desc_flag = (bool) $variables['content']['field_ff_with_description']['#items']->value;

  $ff_items = [];
  foreach ($field_ff_items as $item_key => $item_value) {
    if (is_numeric($item_key)) {

      $item_block = $item_value['#options']['entity'];
      $field_desc_val = $item_block->get('field_ff_item_description')->value;
      $field_title_val = $item_block->get('field_ff_item_title')->value;
      $field_cta_val = $item_block->get('field_ff_item_cta')->value;

      $item = [
        'card__heading' => $field_title_val,
        'card__link__url' => ($with_cta_flag) ? $field_cta_val : NULL,
        'card__link__text' => ($with_cta_flag) ? t('Explore') : NULL,
        'card__body' => ($with_desc_flag) ? $field_desc_val : NULL,
      ];

      if ($with_image_flag && !$item_block->get('field_ff_item_image')->isEmpty()) {
        $media_id = $item_block
          ->get('field_ff_item_image')
          ->first()
          ->target_id;

        $media_params = $media_helper->getMediaParametersById($media_id);
        if (!($media_params['error'] ?? FALSE) && ($media_params['src'] ?? FALSE)) {
          $item['card__image__src'] = $media_params['src'];
          $item['card__image__alt'] = $media_params['alt'];
          $item['card__image__title'] = $media_params['title'];
        }
      }

      $ff_items[] = $item;
    }
  }
  /** @var \Drupal\mars_common\ThemeConfiguratorParser $themeParser */
  $themeParser = Drupal::service('mars_common.theme_configurator_parser');
  $file_divider_content = $themeParser->getGraphicDivider();
  $file_border_content = $themeParser->getBrandBorder2();

  $variables['items'] = $ff_items;
  $variables['grid_label'] = $field_ff_title;
  $variables['grid_type'] = 'card';
  $variables['item_type'] = 'card';
  $variables['divider'] = $file_divider_content ?? NULL;
  $variables['brand_borders'] = $file_border_content ?? NULL;
}

/**
 * Implements hook_form_alter().
 */
function mars_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    $form_id === 'block_form' ||
    $form_id === 'layout_builder_add_block' ||
    $form_id === 'layout_builder_update_block'
  ) {
    $form['settings']['label']['#access'] = FALSE;
    $form['settings']['label_display']['#access'] = FALSE;
  }

  if (strpos($form_id, 'poll_view_form_') === 0) {
    $form['actions']['cancel'] = NULL;
    if ($form['actions']['vote']['#ajax'] ?? NULL) {
      $form['actions']['vote']['#ajax']['progress'] = FALSE;
    }
    $form['actions']['vote']['#submit'][] = 'poll_form_submit_action_callback';
    if ($form['actions']['result']['#ajax'] ?? NULL) {
      $form['actions']['result']['#ajax']['progress'] = FALSE;
    }
  }

  // Alter layout form related to content type
  // in order to add custom validation.
  $form_object = $form_state->getFormObject();
  if (
    strpos($form_id, 'layout_builder_form') !== FALSE &&
    ($form_object instanceof DefaultsEntityForm || $form_object instanceof OverridesEntityForm)
  ) {

    $entity = $form_state->getFormObject()->getEntity();

    if ($form_alter_class = mars_common_get_layout_alter_class($entity)) {
      $form_state->set('form_alter_class', $form_alter_class);
      $form['#validate'][] = [$form_alter_class, 'validate'];
    }
  }
}

/**
 * Callback function to delete status messages in the poll submit function.
 */
function poll_form_submit_action_callback() {
  $msg = \Drupal::messenger();
  $msg->deleteByType('status');
}

/**
 * Returns Layout Form Alter class based on Drupal entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Drupal entity.
 *
 * @todo Move this function to a Mars Common service method.
 *
 * @return string
 *   Class name.
 */
function mars_common_get_layout_alter_class(EntityInterface $entity): ?string {
  $original_id = NULL;
  if ($entity instanceof Node) {
    $original_id = 'node.' . $entity->bundle() . '.default';
  }
  elseif ($entity instanceof LayoutEntityDisplayInterface) {
    $original_id = $entity->getOriginalId();
  }

  switch ($original_id) {
    case 'node.faq_contact.default':
      return ContactHelpLayoutFormAlter::class;

    case 'node.newsletter_sign_up.default':
      return NewsletterSignUpLayoutFormAlter::class;

    case 'node.where_to_buy.default':
      return WhereToBuyLayoutFormAlter::class;

    case 'node.recipe.full':
    case 'node.recipe.default':
      return RecipeLayoutFormAlter::class;

    case 'node.homepage.default':
      return HomepageLayoutFormAlter::class;

    case 'node.article.default':
      return ArticleLayoutFormAlter::class;

    case 'node.product.default':
    case 'node.product_multipack.default':
      return ProductLayoutFormAlter::class;

    case 'node.landing_page.default':
    case 'node.landing_page.full':
      return LandingPageLayoutFormAlter::class;

    case 'node.about_page.default':
    case 'node.about_page.full':
      return AboutPageLayoutFormAlter::class;

    case 'node.content_hub_page.default':
      return ContentHubPageLayoutFormAlter::class;

    case 'node.search.default':
      return SearchLayoutFormAlter::class;

    case 'node.campaign.default':
      return CampaignLayoutFormAlter::class;

    default:
      return NULL;
  }

}

/**
 * Change feedback form according to type.
 */
function _mars_common_feedback_ajax_callback(&$form, FormStateInterface $form_state) {
  $form_state->setRebuild();
  return $form;
}

/**
 * Clear render cache.
 */
function _mars_common_render_cache_clear() {
  foreach (Cache::getBins() as $service_id => $cache_backend) {
    if ($service_id === 'render') {
      $cache_backend->deleteAll();
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function mars_common_menu_link_content_insert(EntityInterface $entity) {
  if ($entity->get('menu_name')->value == MenuConstants::MAIN_MENU_ID) {
    _mars_common_render_cache_clear();
  }
}

/**
 * Implements hook_entity_update().
 */
function mars_common_menu_link_content_update(EntityInterface $entity) {
  if ($entity->get('menu_name')->value == MenuConstants::MAIN_MENU_ID) {
    _mars_common_render_cache_clear();
  }
}

/**
 * Implements hook_entity_delete().
 */
function mars_common_menu_link_content_delete(EntityInterface $entity) {
  if ($entity->get('menu_name')->value == MenuConstants::MAIN_MENU_ID) {
    _mars_common_render_cache_clear();
  }
}

/**
 * Validate menu links against limit.
 *
 * @param \Drupal\menu_link_content\Entity\MenuLinkContent $entity
 *   MenuLinkContent entity for review.
 * @param string $menu
 *   The Menu name.
 * @param int $limit
 *   Max amount of menu links.
 */
function _mars_common_menu_link_count_validation(MenuLinkContent $entity, string $menu, int $limit) {
  if ($entity->isNew() ||
  (
    $entity->get('menu_name')->value !== $menu ||
    $entity->get('parent')->value !== NULL)
  ) {
    $menu_tree_params = new MenuTreeParameters();
    $menu_tree_params->setMaxDepth(1);
    $menu_tree = \Drupal::menuTree()->load($menu, $menu_tree_params);
    if (count($menu_tree) >= $limit) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Add custom validation to menu link form.
 *
 * @param array $form
 *   Render array of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function _mars_common_form_menu_link_content_menu_link_content_form_validate(array &$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $form_values = $form_state->getValues();
  $form_values_parent_menu = substr($form_values['menu_parent'], 0, -1);
  if ($form_values_parent_menu === MenuConstants::MAIN_MENU_ID) {
    if (!_mars_common_menu_link_count_validation($entity, $form_values_parent_menu, MenuConstants::MAIN_MENU_ITEM_COUNT_LIMIT)) {
      $form_state->setErrorByName(
        'menu_parent',
        t(
          'The maximum top level menu count of <b>@menu</b> is <b>@max_count</b>.',
          [
            '@menu' => '<Main navigation>',
            '@max_count' => MenuConstants::MAIN_MENU_ITEM_COUNT_LIMIT,
          ]
        )
      );
    }
  }
  elseif ($form_values_parent_menu === MenuConstants::TOP_FOOTER_MENU_ID) {
    if (!_mars_common_menu_link_count_validation($entity, $form_values_parent_menu, MenuConstants::TOP_FOOTER_MENU_ITEM_COUNT_LIMIT)) {
      $form_state->setErrorByName(
        'menu_parent',
        t(
          'The maximum top level menu count of <b>@menu</b> is <b>@max_count</b>.',
          [
            '@menu' => '<Top footer navigation>',
            '@max_count' => MenuConstants::TOP_FOOTER_MENU_ITEM_COUNT_LIMIT,
          ]
        )
      );
    }
  }
  elseif ($form_values_parent_menu === MenuConstants::LEGAL_MENU_ID) {
    if (!_mars_common_menu_link_count_validation($entity, $form_values_parent_menu, MenuConstants::LEGAL_MENU_ITEM_COUNT_LIMIT)) {
      $form_state->setErrorByName(
        'menu_parent',
        t(
          'The maximum top level menu count of <b>@menu</b> is <b>@max_count</b>.',
          [
            '@menu' => '<Legal links menu>',
            '@max_count' => MenuConstants::LEGAL_MENU_ITEM_COUNT_LIMIT,
          ]
        )
      );
    }
  }
}

/**
 * Menu link form alter.
 *
 * @param array $form
 *   Render array of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function mars_common_form_menu_link_content_menu_link_content_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#validate'][] = '_mars_common_form_menu_link_content_menu_link_content_form_validate';
  $form['#prefix'] = '<div id="menu-link-form-content-wrapper">';
  $form['#suffix'] = '</div>';

  $form_input = $form_state->getUserInput();
  $menu_parent = $form_input['menu_parent'] ?? $form['menu_parent']['#default_value'];
  if (substr($menu_parent, 0, -1) === MenuConstants::MAIN_MENU_ID) {
    $form['title']['widget'][0]['value']['#maxlength'] = MenuConstants::MAIN_MENU_ITEM_CHARACTER_COUNT_LIMIT;
    $form['title']['widget'][0]['value']['#description'] .= ' Be sure the items you add do not cause the navigation to extend past one line.';
  }
  elseif (substr($menu_parent, 0, -1) === MenuConstants::LEGAL_MENU_ID) {
    $form['title']['widget'][0]['value']['#maxlength'] = MenuConstants::LEGAL_MENU_ITEM_CHARACTER_COUNT_LIMIT;
  }
  elseif (substr($menu_parent, 0, -1) === MenuConstants::TOP_FOOTER_MENU_ID) {
    $form['title']['widget'][0]['value']['#maxlength'] = MenuConstants::TOP_FOOTER_MENU_ITEM_CHARACTER_COUNT_LIMIT;
  }
  $form['menu_parent']['#ajax'] = [
    'disable-refocus' => FALSE,
    'event' => 'change',
    'wrapper' => 'menu-link-form-content-wrapper',
    'progress' => [
      'type' => 'throbber',
    ],
  ];
}

/**
 * Validate "main menu" edit form.
 *
 * @param array $form
 *   Render array of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function _mars_common_form_menu_edit_form_validate(array &$form, FormStateInterface $form_state) {
  $menu_tree_params = new MenuTreeParameters();
  $menu_tree_params->setMaxDepth(1);
  $menu_tree = \Drupal::menuTree()->load(MenuConstants::MAIN_MENU_ID, $menu_tree_params);
  $form_values = $form_state->getValues();
  $menu_tree_root_items_count = 0;
  foreach ($form_values['links'] as $link) {
    if (!$link['parent']) {
      $menu_tree_root_items_count++;
    }
  }

  if ($menu_tree_root_items_count > MenuConstants::MAIN_MENU_ITEM_COUNT_LIMIT && $menu_tree_root_items_count != count($menu_tree)) {
    $form_state->setErrorByName('links', t(
      'The maximum top level menu count of <b>@menu</b> is <b>@max_count</b>.',
      [
        '@menu' => '<Main navigation>',
        '@max_count' => MenuConstants::MAIN_MENU_ITEM_COUNT_LIMIT,
      ]
    ));

    // TODO: find a proper fix.
    /*
     * Upon validation error, the form should show the invalid state in which it
     * was submitted. In this case because of tabledrag behavior, upon
     * validation error the form will look like as if it's in its initial state,
     * but in reality the hidden parent and weight fields will contain the
     * invalid state.
     *
     * We are resetting those fields to their default values so the
     * visible state and the actual hidden input state are equal. This has to be
     * done manually as an invalid form is not rebuilt by the form builder even
     * if we set it to do so.
     *
     * The proper fix would be to properly change the visibly rendered table to
     * reflect the posted values, but currently it's done based on the actually
     * saved menu structure and the posted values are not used at all.
     */
    foreach ($form['links']['links'] as &$link_form) {
      if (is_array($link_form)) {
        if (
          isset($link_form['parent']['#value'], $link_form['parent']['#default_value'])
        ) {
          $link_form['parent']['#value'] = $link_form['parent']['#default_value'];
        }
        if (
          isset($link_form['weight']['#value'], $link_form['weight']['#default_value'])
        ) {
          $link_form['weight']['#value'] = $link_form['weight']['#default_value'];
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mars_common_form_menu_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity && $entity->id() === MenuConstants::MAIN_MENU_ID) {
    $form_state->setCached(FALSE);
    $form['#validate'][] = '_mars_common_form_menu_edit_form_validate';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mars_common_form_poll_form_alter(
  &$form,
  FormStateInterface $form_state,
  $form_id
) {
  $userInput = &$form_state->getUserInput();
  $fieldTypeValue = $userInput['field_type'] ?? $form['field_type']['widget']['#default_value'];
  $form['#prefix'] = '<div id="poll-form-content-wrapper">';
  $form['#suffix'] = '</div>';

  if ($fieldTypeValue === 'poll') {
    $form['choice']['widget']['#cardinality'] = FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED;
  }
  elseif ($fieldTypeValue === 'feedback') {
    $form['choice']['widget']['#cardinality'] = 2;
    if (!isset($form['choice']['widget'][1])) {
      $form['choice']['widget'][1] = $form['choice']['widget'][0];
      $form['choice']['widget']['#max_delta'] = 1;
    }

    if (empty($form['choice']['widget'][0]['choice']['#default_value'])) {
      $form['choice']['widget'][0]['choice']['#default_value'] = 'YES';
      $form['choice']['widget'][0]['choice']['#required'] = TRUE;
    }

    if (empty($form['choice']['widget'][1]['choice']['#default_value'])) {
      $form['choice']['widget'][1]['choice']['#default_value'] = 'NO';
      $form['choice']['widget'][1]['choice']['#required'] = TRUE;
    }

    foreach ($form['choice']['widget'] as $choiceIndex => $choice) {

      // Leave alone not numbered keys, those are not choices.
      if (!is_int($choiceIndex)) {
        continue;
      }

      // Remove extra choices.
      if ($choiceIndex > 1) {
        unset($form['choice']['widget'][$choiceIndex]);
        continue;
      }

      // Remove the empty values so the default value will be used.
      if (
        isset($userInput['choice'][$choiceIndex]['choice']) &&
        $userInput['choice'][$choiceIndex]['choice'] === ''
      ) {
        unset($userInput['choice'][$choiceIndex]);
      }
    }

    // Update field state with new item count.
    $fieldName = $form['choice']['widget']['#field_name'];
    $parents = [];
    $field_state = WidgetBase::getWidgetState(
      $parents,
      $fieldName,
      $form_state
    );
    $field_state['items_count'] = 2;
    WidgetBase::setWidgetState($parents, $fieldName, $form_state, $field_state);
  }

  $form['field_type']['widget']['#ajax'] =
    [
      'callback' => '_mars_common_feedback_ajax_callback',
      'disable-refocus' => FALSE,
      'event' => 'change',
      'wrapper' => 'poll-form-content-wrapper',
      'progress' => [
        'type' => 'throbber',
      ],
    ];

  $form['question']['widget'][0]['value']['#title'] = 'Title';
  if (empty($form['question']['widget'][0]['value']['#default_value'])) {
    $mars_config = \Drupal::configFactory()
      ->getEditable('mars_common.system.site');
    $form['question']['widget'][0]['value']['#default_value'] = t('Thank you for visiting @brand!', ['@brand' => $mars_config->get('brand')]);
  }
  $form['question']['widget'][0]['value']['#maxlength'] = 55;
  $form['choice']['widget']['#title'] = 'Responses';
  $form['anonymous_vote_allow']['widget']['value']['#default_value'] = 1;

  $form['choice']['widget']['add_more']['#states'] = [
    'visible' => [
      ':input[name="field_type"]' => ['value' => 'poll'],
    ],
  ];

  $form['group_feedback_variations']['#states'] = [
    'expanded' => [
      ':input[name="field_type"]' => ['value' => 'feedback'],
    ],
  ];

  $form['group_poll_options']['#states'] = [
    'expanded' => [
      ':input[name="field_type"]' => ['value' => 'poll'],
    ],
  ];
}

/**
 * Implements preprocess_HOOK().
 */
function mars_common_preprocess_page(&$variables) {
  $current_route = Drupal::routeMatch();
  $route_name = $current_route->getRouteName();

  if ($route_name === 'system.403' ||
    $route_name === 'system.404') {
    $node = Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'error_page']);
    if ($node) {
      $variables['node'] = $node[key($node)];
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function mars_common_field_widget_form_alter(
  &$element,
  FormStateInterface $form_state,
  $context
) {
  $plugin_id = $context['widget']->getPluginId();
  $field_name = $context['items']->getName();

  // Apply for titles:
  $applied_titles = [
    'field_ff_item_title',
    'field_inline_image_title',
    'field_inline_video_title',
    'field_full_image_title',
    'field_full_video_title',
    'field_carousel_title',
  ];
  if (in_array($field_name, $applied_titles)) {
    $element['value']['#maxlength'] = 55;
  }
  if ($field_name === 'field_ff_item_description') {
    $element['value']['#maxlength'] = 160;
  }

  if ($field_name == 'field_product_description') {
    $element['#maxlength'] = 300;
  }
  if ($field_name == 'field_recipe_description') {
    $element['#maxlength'] = 160;
  }

  if ($plugin_id === 'poll_choice_default' && $field_name === 'choice') {
    $element['choice']['#size'] = 40;
    $element['choice']['#maxlength'] = 25;
  }

  $form_id = $form_state->getFormObject()->getFormId();
  $form_array = [
    'node_error_page_edit_form',
    'node_error_page_form',
  ];
  if (in_array($form_id, $form_array) && $field_name == 'title') {
    $element['value']['#maxlength'] = 15;
    $element['value']['#default_value'] = $element['value']['#default_value'] ?? t('Oops');
  }
  if (in_array($form_id, $form_array) && $field_name == 'body') {
    $element['#maxlength'] = 100;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mars_common_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content'])
    and $content['#block_content'] instanceof BlockContentInterface) {
    $block_type_suggestion = 'block__block_content_' . $content['#block_content']->bundle();
    // Taking care of observed duplication of block__block_content.
    $suggestions_rev = array_reverse($suggestions);
    $index = array_search('block__block_content', $suggestions_rev);
    if (is_numeric($index)) {
      array_splice($suggestions_rev, $index, 0, $block_type_suggestion);
      $suggestions = array_reverse($suggestions_rev);
    }
    else {
      $suggestions[] = $block_type_suggestion;
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function mars_common_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function mars_common_element_info_alter(array &$info) {
  if (isset($info['inline_entity_form'])) {
    $info['inline_entity_form']['#process'][] = 'mars_common_include_ief_entities';
  }
}

/**
 * Implements hook_field_widget_multivalue_inline_entity_form_complex_form_alter().
 */
function mars_common_field_widget_multivalue_inline_entity_form_complex_form_alter(array &$elements, FormStateInterface $form_state, array $context) {
  if (isset($elements['form']['inline_entity_form'])) {
    $elements['form']['inline_entity_form']['#process'][] = 'mars_common_include_ief_entities';
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function mars_common_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  foreach ($fields as $field) {
    if ($fields[$field->getName()]->getConstraint('UniqueField') !== NULL) {
      $fields[$field->getName()]->addConstraint('MarsCommonInlineEntityFormUniqueField');
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function mars_common_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  foreach ($fields as $field) {
    if ($field->getName() == 'field_list_item_order') {
      $fields[$field->getName()]->addConstraint('RegExValidationConstraint', [
        'regex' => '/^\d{0,2}\.{0,1}\d{0,2}$/i',
        'errorMessage' => 'Please enter correct order number. Example: 1.1 or 1.',
      ]);
    }

    if ($fields[$field->getName()]->getConstraint('UniqueField') !== NULL) {
      $fields[$field->getName()]->addConstraint('MarsCommonInlineEntityFormUniqueField');
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mars_common_theme_suggestions_poll_vote_alter(array &$suggestions, array $variables) {
  if ((isset($variables['form']['#entity']->field_type) && $variables['form']['#entity']->field_type->value == 'feedback')
    || (isset($variables['poll']) && $variables['poll']->field_type->value == 'feedback')) {
    $suggestions[] = 'poll_vote__feedback';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mars_common_theme_suggestions_poll_results_alter(array &$suggestions, array $variables) {
  if ((isset($variables['form']['#entity']->field_type) && $variables['form']['#entity']->field_type->value == 'feedback')
    || (isset($variables['poll']) && $variables['poll']->field_type->value == 'feedback')) {
    $suggestions[] = 'poll_results__feedback';
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function mars_common_taxonomy_term_presave(TermInterface $term) {
  if ($term->bundle() == FooterBlock::VID_TAXONOMY_REGION) {
    $terms = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term')->loadByProperties([
      'vid' => FooterBlock::VID_TAXONOMY_REGION,
      'field_default_region' => TRUE,
    ]);

    if ($term->field_default_region->value) {
      foreach ($terms as $term_item) {
        /** @var \Drupal\taxonomy\TermInterface $term_item */
        if ($term_item->id() != $term->id()) {
          $term_item->set('field_default_region', FALSE);
          $term_item->save();
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function mars_common_page_attachments(&$page) {
  $current_route = Drupal::routeMatch();
  $route_name = $current_route->getRouteName();
  $supported_routes = [
    'layout_builder.overrides.node.view',
    'layout_builder.defaults.node.view',
  ];

  if (in_array($route_name, $supported_routes)) {
    $page['#attached']['library'][] = 'mars_common/mars_common.dialog_fix';
  }
}

/**
 * Implements hook_entity_delete().
 */
function mars_common_entity_delete(EntityInterface $entity) {
  if ($entity instanceof TermInterface && $entity->bundle() == FooterBlock::VID_TAXONOMY_REGION) {
    $tags = [FooterBlock::CUSTOM_CACHE_TAG];
    Cache::invalidateTags($tags);
  }
}

/**
 * Implements hook_entity_update().
 */
function mars_common_entity_update(EntityInterface $entity) {
  if ($entity instanceof TermInterface && $entity->bundle() == FooterBlock::VID_TAXONOMY_REGION) {
    $tags = [FooterBlock::CUSTOM_CACHE_TAG];
    Cache::invalidateTags($tags);
  }
}

/**
 * Implements hook_entity_create().
 */
function mars_common_entity_create(EntityInterface $entity) {
  if ($entity instanceof TermInterface && $entity->bundle() == FooterBlock::VID_TAXONOMY_REGION) {
    $tags = [FooterBlock::CUSTOM_CACHE_TAG];
    Cache::invalidateTags($tags);
  }
}

/**
 * Include entities list for validation.
 *
 * @param array $entity_form
 *   Entity form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 * @param array $complete_form
 *   Complete form.
 *
 * @return array
 *   Updated entity form.
 */
function mars_common_include_ief_entities(array $entity_form, FormStateInterface $form_state, array &$complete_form) {
  if (isset($entity_form['#entity']) && isset($entity_form['#ief_id'])) {
    $entity_form['#entity']->_inline_entity_form_entities = array_map(function ($element) {
      return $element['entity'];
    }, $form_state->get([
      'inline_entity_form',
      $entity_form['#ief_id'],
      'entities',
    ]));
  }

  return $entity_form;
}

/**
 * Implements hook_pathauto_punctuation_chars_alter().
 */
function mars_common_pathauto_punctuation_chars_alter(array &$punctuation) {
  $punctuation['registered_trademark'] = ['value' => '®', 'name' => t('Registered trademark symbol')];
}
