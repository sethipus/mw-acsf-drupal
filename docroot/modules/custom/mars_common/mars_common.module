<?php

/**
 * @file
 * MARS Common module main file.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\mars_common\Form\Alter\ContactHelpLayoutFormAlter;
use Drupal\layout_builder\Form\DefaultsEntityForm;
use Drupal\mars_common\Form\Alter\NewsletterSignUpLayoutFormAlter;
use Drupal\mars_common\Form\Alter\WhereToBuyLayoutFormAlter;
use Drupal\mars_common\Form\Alter\RecipeLayoutFormAlter;
use Drupal\mars_common\Form\Alter\HomepageLayoutFormAlter;

/**
 * Implements hook_preprocess().
 */
function mars_common_preprocess(&$variables, $hook) {
  if ($hook === 'views_view__grid_card') {
    $divider_id = Drupal::config('emulsifymars.settings')
      ->get('graphic_divider');
    if (isset($divider_id[0])) {
      $file_entity = File::load($divider_id[0]);
      $file_url = Url::fromUri(file_create_url($file_entity->getFileUri()));
      $file_divider_content = file_get_contents($file_url->getUri());
    }

    $border_id = Drupal::config('emulsifymars.settings')
      ->get('brand_borders');

    if (isset($border_id[0])) {
      $file_entity = File::load($border_id[0]);
      $file_url = Url::fromUri(file_create_url($file_entity->getFileUri()));
      $file_border_content = file_get_contents($file_url->getUri());
    }

    $border_radius = Drupal::config('emulsifymars.settings')
      ->get('button_style');

    $variables['theme_styles'] = 'drupal';
    $variables['graphic_divider'] = $file_divider_content ?? '';
    $variables['brand_border'] = $file_border_content ?? '';
    $variables['ajax_card_grid_heading'] = $variables['view']->args[0] ?? '';
    $variables['ajax_card_grid_link_text'] = 'See All';
    $variables['ajax_card_grid_border_radius'] = $border_radius ?? 0;
  }

  if ($hook === 'views_infinite_scroll_pager__grid_card') {
    $border_radius = Drupal::config('emulsifymars.settings')
      ->get('button_style');
    $variables['default_link_border_radius'] = $border_radius ?? 0;
  }
}

/**
 * Implements hook_theme().
 */
function mars_common_theme($existing, $type, $theme, $path) {
  return [
    'header_block' => [
      'variables' => [
        'logo'              => NULL,
        'primary_menu'      => NULL,
        'secondary_menu'    => NULL,
        'search_menu'       => NULL,
        'language_selector' => NULL,
        'search_block'      => NULL,
        'alert_banner'      => NULL,
      ],
      'template' => 'block--mars-common--header',
    ],
    'footer_block' => [
      'variables' => [
        'logo'            => NULL,
        'twix_border'     => NULL,
        'social_links'    => NULL,
        'top_footer_menu' => NULL,
        'legal_links'     => NULL,
        'marketing'       => NULL,
        'corporate_tout'  => NULL,
        'region_selector' => NULL,
      ],
      'template' => 'footer-block',
    ],
    'content_feature_module_block' => [
      'variables' => [
        'eyebrow' => NULL,
        'title' => NULL,
        'background' => NULL,
        'description' => NULL,
        'explore_cta' => NULL,
        'explore_cta_link' => NULL,
        'border_radius' => NULL,
        'graphic_divider' => NULL,
      ],
      'template' => 'content-feature-module-block',
    ],
    'social_feed_block' => [
      'variables' => [
        'label' => '',
        'items' => [],
        'graphic_divider' => '',
        'brand_border' => '',
      ],
    ],
    'parent_page_header_block' => [
      'variables' => [
        'eyebrow' => NULL,
        'label' => NULL,
        'background' => NULL,
        'description' => NULL,
      ],
      'template' => 'parent-page-header-block',
    ],
    'file_text_item_widget' => [
      'render element' => 'element',
    ],
    'carousel_item_formatter' => [
      'variables' => [
        'item_url' => NULL,
        'item_description' => NULL,
        'media_type' => NULL,
      ],
    ],
    'list_item_formatter' => [
      'variables' => [
        'item_url' => NULL,
        'item_description' => NULL,
      ],
    ],
    'product_feature_block' => [
      'variables' => [
        'eyebrow' => NULL,
        'label' => NULL,
        'background_color' => NULL,
        'image' => NULL,
        'explore_cta' => NULL,
        'explore_cta_link' => NULL,
      ],
      'template' => 'product-feature-block',
    ],
    'newsletter_signup_form_block' => [
      'variables' => [
        'form_id' => NULL,
      ],
      'template' => 'newsletter-signup-form-block',
    ],
    'contact_form_block' => [
      'variables' => [
        'form_id' => NULL,
      ],
      'template' => 'contact-form-block',
    ],
    'error_page_block' => [
      'variables' => [
        'title' => NULL,
        'body' => NULL,
        'links' => NULL,
        'image' => NULL,
        'image_alt' => NULL,
        'graphic_divider' => NULL,
        'brand_shape' => NULL,
      ],
      'template' => 'error-page-block',
    ],
    'contact_help_banner_block' => [
      'variables' => [
        'label' => NULL,
        'description' => NULL,
        'social_links_label' => NULL,
        'phone_cta_label' => NULL,
        'phone_cta_link' => NULL,
        'email_cta_label' => NULL,
        'email_cta_link' => NULL,
        'help_and_contact_cta_label' => NULL,
        'help_and_contact_cta_url' => NULL,
        'social_menu_items' => NULL,
        'brand_shape' => NULL,
      ],
      'template' => 'contact-help-banner-block',
    ],
    'iframe_block' => [
      'variables' => [
        'url' => NULL,
        'accessibility_title' => NULL,
      ],
      'template' => 'iframe-block',
    ],
  ];
}

/**
 * Prepares variables for carousel item widget templates.
 *
 * Default template: carousel-item-widget.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the carousel item field widget.
 */
function mars_common_preprocess_file_text_item_widget(array &$variables) {
  $element = $variables['element'];

  $variables['attributes'] = [
    'class' => [
      'carousel-item-widget',
      'js-form-managed-file',
      'form-managed-file',
      'clearfix',
    ],
  ];

  $variables['data'] = [];
  foreach (Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__media_carousel(array &$variables) {
  $field_carousel_title = $variables['content']['field_carousel_title'];
  $field_carousel_items = $variables['content']['field_carousel_items'];

  $border_id = Drupal::config('emulsifymars.settings')
    ->get('brand_borders');

  if (isset($border_id[0])) {
    $file_entity = File::load($border_id[0]);
    $file_url = Url::fromUri(file_create_url($file_entity->getFileUri()));
    $file_content = file_get_contents($file_url->getUri());

  }

  $media_items = [];
  foreach ($field_carousel_items as $item_key => $item_value) {
    if (is_numeric($item_key)) {
      $media_items[] = [
        'src' => $item_value['#item_url']->getUri(),
        'content' => $item_value['#item_description'],
        'video' => ($item_value['#media_type'] == 'video'),
        'image' => ($item_value['#media_type'] == 'image'),
        'alt' => NULL,
        'title' => NULL,
      ];
    }
  }

  $variables['title'] = $field_carousel_title['#items'][0]->value;
  $variables['items'] = $media_items;
  $variables['brand_borders'] = $file_content ?? '';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__list(array &$variables) {
  $field_list_items = $variables['content']['field_list_items_reference'];

  $ol_items = [];
  foreach ($field_list_items as $item_key => $item_value) {
    if (is_numeric($item_key)) {

      $item_block = $item_value['#options']['entity'];
      $field_desc_val = $item_block->get('field_list_item_description')->value;
      $field_image_val = $item_block->get('field_list_item_image')->getValue();
      $field_item_order = $item_block->get('field_list_item_order')->value;

      $item = [
        'content' => $field_desc_val,
        'order' => $field_item_order,
      ];

      if (isset($field_image_val[0])) {
        $file_uri = Drupal::entityTypeManager()
          ->getStorage('file')
          ->load($field_image_val[0]['target_id'])
          ->getFileUri();

        $file_url = Url::fromUri(file_create_url($file_uri));
        $image_alt = $field_image_val[0]['alt'];
        $image_title = $field_image_val[0]['title'];

        $item['image'] = [
          'src' => $file_url,
          'alt' => $image_alt,
          'title' => $image_title,
        ];
      }

      $ol_items[] = $item;
    }
  }

  $variables['ol_items'] = $ol_items;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__text_component(array &$variables) {
  $field_body = $variables['content']['field_text_component_body'];
  $field_drop_cap = $variables['content']['field_text_component_drop_cap'];
  $variables['content'] = $field_body['#items'][0]->value;
  $variables['drop_cap'] = $field_drop_cap['#items'][0]->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__inline_image(array &$variables) {
  $field_image = $variables['content']['field_inline_image_file']['#items']->target_id;
  $image_alt = $variables['content']['field_inline_image_file']['#items']->alt;
  $field_shape_motif = $variables['content']['field_inline_image_svg_asset']['#items']->value;
  $field_image_desc = $variables['content']['field_inline_image_description']['#items']->value;

  $file_url = NULL;
  if (isset($field_image)) {
    $file_uri = Drupal::entityTypeManager()
      ->getStorage('file')
      ->load($field_image)
      ->getFileUri();

    $file_url = Url::fromUri(file_create_url($file_uri));
  }

  $variables['image_src'] = $file_url;
  $variables['image_alt'] = $image_alt;
  $variables['image_title'] = NULL;
  $variables['shape_motif'] = (bool) $field_shape_motif;
  $variables['content'] = $field_image_desc;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__full_width_image(array &$variables) {
  $field_image = $variables['content']['field_full_image_file']['#items']->target_id;
  $image_alt = $variables['content']['field_full_image_file']['#items']->alt;
  $field_shape_motif = $variables['content']['field_full_image_svg_asset']['#items']->value;
  $field_image_desc = $variables['content']['field_full_image_description']['#items']->value;
  $field_heading = $variables['content']['field_full_image_title']['#items']->value;

  $file_url = NULL;
  if (isset($field_image)) {
    $file_uri = Drupal::entityTypeManager()
      ->getStorage('file')
      ->load($field_image)
      ->getFileUri();

    $file_url = Url::fromUri(file_create_url($file_uri));
  }

  $variables['heading'] = $field_heading;
  $variables['content'] = $field_image_desc;
  $variables['shape_motif'] = (bool) $field_shape_motif;
  $variables['media'] = [
    'image' => TRUE,
    'src' => $file_url,
    'alt' => $image_alt,
    'title' => NULL,
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__full_width_video(array &$variables) {
  $field_video_url = $variables['content']['field_full_video_path']['#items']->value;
  $field_shape_motif = $variables['content']['field_full_video_svg_asset']['#items']->value;
  $field_video_desc = $variables['content']['field_full_video_description']['#items']->value;
  $field_heading = $variables['content']['field_full_video_title']['#items']->value;

  $variables['heading'] = $field_heading;
  $variables['content'] = $field_video_desc;
  $variables['shape_motif'] = (bool) $field_shape_motif;
  $variables['media'] = [
    'video' => TRUE,
    'src' => $field_video_url,
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_views_view__faq_view__block(array &$variables) {
  $field_title = $variables['view']->getTitle();
  $rows = $variables['rows'];
  $total_rows = $variables['rows'][0]['#view']->total_rows;
  $items_per_page = $variables['view']->pager->options['items_per_page'];

  $faq_items = [];
  if (isset($rows[0])) {
    foreach ($rows[0]['#rows'] as $row_key => $row_value) {
      $qa_node = Node::load($row_value['#row']->nid);
      $question_value = $qa_node->get('field_qa_item_question')->value;
      $answer_value = $qa_node->get('field_qa_item_answer')->value;

      $faq_items[$row_key]['content'] = [
        'question' => $question_value,
        'answer' => $answer_value,
        'order' => $row_key,
      ];
    }
  }

  $variables['qa_items'] = $faq_items;
  $variables['faq_title'] = $field_title;

  $request = Drupal::requestStack()->getCurrentRequest();
  if (
    $request->query->get('items_per_page') != 'All' &&
    !empty($variables['exposed']) &&
    $total_rows > $items_per_page
  ) {
    $query_params = $request->query->all();
    $query_params['items_per_page'] = 'All';
    $path_query = http_build_query($query_params);
    $current_path = $request->getPathInfo();

    $cta_button_label = $variables['exposed']['items_per_page']['#options']['All'];
    $cta_button_link = $current_path . '?' . $path_query;
  }

  $variables['cta_button_label'] = $cta_button_label ?? NULL;
  $variables['cta_button_link'] = $cta_button_link ?? NULL;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mars_common_preprocess_block__inline_block__flexible_framer(array &$variables) {
  $field_ff_items = $variables['content']['field_ff_items_reference'];
  $field_ff_title = $variables['content']['field_ff_title']['#items']->value;

  $with_cta_flag = (bool) $variables['content']['field_ff_with_cta']['#items']->value;
  $with_image_flag = (bool) $variables['content']['field_ff_with_image']['#items']->value;
  $with_desc_flag = (bool) $variables['content']['field_ff_with_description']['#items']->value;

  $ff_items = [];
  foreach ($field_ff_items as $item_key => $item_value) {
    if (is_numeric($item_key)) {

      $item_block = $item_value['#options']['entity'];
      $field_desc_val = $item_block->get('field_ff_item_description')->value;
      $field_title_val = $item_block->get('field_ff_item_title')->value;
      $field_image_val = $item_block->get('field_ff_item_image')->getValue();
      $field_cta_val = $item_block->get('field_ff_item_cta')->value;

      $item = [
        'card__heading' => $field_title_val,
        'card__link__url' => ($with_cta_flag) ? $field_cta_val : NULL,
        'card__link__text' => ($with_cta_flag) ? t('Explore') : NULL,
        'card__body' => ($with_desc_flag) ? $field_desc_val : NULL,
      ];

      if (isset($field_image_val[0])) {
        $file_uri = Drupal::entityTypeManager()
          ->getStorage('file')
          ->load($field_image_val[0]['target_id'])
          ->getFileUri();

        $file_url = Url::fromUri(file_create_url($file_uri));
        $image_alt = $field_image_val[0]['alt'];
        $image_title = $field_image_val[0]['title'];

        $item['card__image__src'] = ($with_image_flag) ? $file_url->getUri() : NULL;
        $item['card__image__alt'] = ($with_image_flag) ? $image_alt : NULL;
        $item['card__image__title'] = ($with_image_flag) ? $image_title : NULL;
      }

      $ff_items[] = $item;
    }
  }

  $divider_id = Drupal::config('emulsifymars.settings')
    ->get('graphic_divider');
  if (isset($divider_id[0])) {
    $file_entity = File::load($divider_id[0]);
    $file_url = Url::fromUri(file_create_url($file_entity->getFileUri()));
    $file_divider_content = file_get_contents($file_url->getUri());
  }

  $border_id = Drupal::config('emulsifymars.settings')
    ->get('brand_borders');
  if (isset($border_id[0])) {
    $file_entity = File::load($border_id[0]);
    $file_url = Url::fromUri(file_create_url($file_entity->getFileUri()));
    $file_border_content = file_get_contents($file_url->getUri());
  }

  $variables['items'] = $ff_items;
  $variables['grid_label'] = $field_ff_title;
  $variables['grid_type'] = 'card';
  $variables['item_type'] = 'card';
  $variables['divider'] = $file_divider_content ?? NULL;
  $variables['brand_borders'] = $file_border_content ?? NULL;
}

/**
 * Implements hook_form_alter().
 */
function mars_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    $form_id === 'block_form' ||
    $form_id === 'layout_builder_add_block' ||
    $form_id === 'layout_builder_update_block'
  ) {
    $form['settings']['label']['#access'] = FALSE;
    $form['settings']['label_display']['#access'] = FALSE;
  }

  // Alter layout form related to Contact & Help content type
  // in order to add custom validation.
  $form_object = $form_state->getFormObject();
  if (
    $form_id = 'entity_view_display_layout_builder_form' &&
    $form_object instanceof DefaultsEntityForm
  ) {
    $original_id = $form_state->getFormObject()->getEntity()->getOriginalId();
    if ($original_id == 'node.contact_help.default') {
      $form['#validate'][] = [ContactHelpLayoutFormAlter::class, 'validate'];
    }
    if ($original_id == 'node.newsletter_sign_up.default') {
      $form['#validate'][] = [NewsletterSignUpLayoutFormAlter::class, 'validate'];
    }
    if ($original_id == 'node.where_to_buy.default') {
      $form['#validate'][] = [WhereToBuyLayoutFormAlter::class, 'validate'];
    }
    if (
      $original_id == 'node.recipe.full' ||
      $original_id == 'node.recipe.default'
    ) {
      $form['#validate'][] = [RecipeLayoutFormAlter::class, 'validate'];
    }
    if (
      $original_id == 'node.homepage.default'
    ) {
      $form['#validate'][] = [HomepageLayoutFormAlter::class, 'validate'];
    }
  }
}

/**
 * Implements preprocess_HOOK().
 */
function mars_common_preprocess_page(&$variables) {
  $current_route = Drupal::routeMatch();
  $route_name = $current_route->getRouteName();

  if ($route_name === 'system.403' ||
      $route_name === 'system.404') {
    $node = Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'error_page']);
    if ($node) {
      $variables['node'] = $node[key($node)];
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function mars_common_field_widget_form_alter(
  &$element,
  FormStateInterface $form_state,
  $context
) {
  $field_name = $context['items']->getName();

  if ($field_name === 'field_ff_item_description') {
    $element['value']['#maxlength'] = 120;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function mars_common_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $content = $variables['elements']['content'];
  if (isset($content['#block_content'])
    and $content['#block_content'] instanceof BlockContentInterface) {
    $block_type_suggestion = 'block__block_content_' . $content['#block_content']->bundle();
    // Taking care of observed duplication of block__block_content.
    $suggestions_rev = array_reverse($suggestions);
    $index = array_search('block__block_content', $suggestions_rev);
    if (is_numeric($index)) {
      array_splice($suggestions_rev, $index, 0, $block_type_suggestion);
      $suggestions = array_reverse($suggestions_rev);
    }
    else {
      $suggestions[] = $block_type_suggestion;
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function mars_common_entity_bundle_field_info_alter(
  &$fields,
  EntityTypeInterface $entity_type,
  $bundle
) {
  foreach ($fields as $field) {
    if ($field->getName() == 'field_list_item_order') {
      $fields[$field->getName()]->addConstraint('RegExValidationConstraint', [
        'regex' => '/^\d{0,2}\.{0,1}\d{0,2}$/i',
        'errorMessage' => 'Please enter correct order number. Example: 1.1 or 1.',
      ]);
    }
  }
}
