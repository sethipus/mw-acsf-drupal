<?php

/**
 * @file
 * Primary module hooks for mars_seo module.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Spatie\SchemaOrg\Type;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Language\LanguageInterface;

/**
 * Implements hook_node_view_alter().
 */
function mars_seo_node_view_alter(array &$build, NodeInterface $node, EntityViewDisplayInterface $display) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() !== 'entity.node.canonical' || $route_match->getParameter('node')->id() !== $node->id()) {
    return;
  }

  /** @var \Drupal\mars_seo\JsonLdService $service */
  $service = \Drupal::service('mars_seo.json_ld');
  $data = $service->getStructuredData($node, $build);

  $iterator = new RecursiveIteratorIterator(new RecursiveArrayIterator($data), RecursiveIteratorIterator::CHILD_FIRST);

  /** @var \Spatie\SchemaOrg\Type|null $item */
  foreach ($iterator as $key => $item) {
    if (isset($item) && $item instanceof Type) {
      $tag = [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#attributes' => [
          'type' => 'application/ld+json',
        ],
        '#value' => json_encode($item->toArray(), JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE),
        '#cache' => [
          'tags' => $node->getCacheTags(),
          'contexts' => $node->getCacheContexts(),
        ],
      ];

      $build['#attached']['html_head'][] = [$tag, 'mars_seo_json_ld__' . $key];
    }
  }

}

/**
 * Implements hook_token_info().
 */
function mars_seo_token_info() {
  $type = [
    'name' => t('Custom Token'),
    'description' => t('Tokens for custom things.'),
  ];
  $node['type_page'] = [
    'name' => t("Type"),
    'description' => t('Type of page'),
  ];
  $node['hero_image'] = [
    'name' => t("Hero image"),
    'description' => t('Default hero image.'),
  ];
  $node['homepage_summary'] = [
    'name' => t("Homepage node summary"),
    'description' => t('Homepage node summary field.'),
  ];
  return [
    'types' => ['og_token' => $type],
    'tokens' => ['og_token' => $node],
  ];
}

/**
 * Implements hook_tokens().
 */
function mars_seo_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  if ($type != 'og_token') {
    return [];
  }
  if (isset($options['langcode'])) {
    $langcode = $options['langcode'];
  }
  else {
    $langcode = LanguageInterface::LANGCODE_DEFAULT;
  }

  /** @var \Drupal\node\Entity\Node $node */
  $node = $data['node'] ?? NULL;
  $replacements = [];

  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'type_page':
        $replacement = 'article';
        if ($node !== NULL) {
          if ($node->bundle() == 'product' || $node->bundle() == 'recipe') {
            $replacement = $node->bundle();
          }
          $bubbleable_metadata->addCacheableDependency($node);
        }
        $replacements[$original] = $replacement;
        break;

      case 'hero_image':
        if ($node !== NULL) {
          /** @var \Drupal\mars_seo\HeroImageService $hero_image_service */
          $hero_image_service = \Drupal::service('mars_seo.hero_image');

          $bubbleable_metadata->merge($hero_image_service->getCacheableMetadata($node));
          $replacement = $hero_image_service->getHeroImageUrl($node);
        }

        $replacements[$original] = $replacement ?? '';
        break;

      case 'homepage_summary':
        if ($node !== NULL) {
          $translation = \Drupal::service('entity.repository')->getTranslationFromContext($node, $langcode, ['operation' => 'node_tokens']);
          if ($translation->hasField('body') && ($items = $translation->get('body')) && !$items->isEmpty()) {
            $item = $items[0];
            // If the summary was requested and is not empty, use it.
            if (!empty($item->summary)) {
              $replacement = $item->summary_processed;
            }
            // Attempt to provide a suitable version of the 'body' field.
            else {
              $replacement = $item->processed;
              // Generate an optionally trimmed summary of the body field.
              // Get the 'trim_length' size used for the 'teaser' mode, if
              // present, or use the default trim_length size.
              $display_options = \Drupal::service('entity_display.repository')
                ->getViewDisplay('node', $node->getType(), 'teaser')
                ->getComponent('body');
              if (isset($display_options['settings']['trim_length'])) {
                $length = $display_options['settings']['trim_length'];
              }
              else {
                $settings = \Drupal::service('plugin.manager.field.formatter')->getDefaultSettings('text_summary_or_trimmed');
                $length = $settings['trim_length'];
              }
              $replacement = text_summary($replacement, $item->format, $length);
            }
            $bubbleable_metadata->addCacheableDependency($node);
          }
        }

        $replacements[$original] = $replacement ?? '';
        break;

      default:
        break;
    }
  }

  return $replacements;
}
